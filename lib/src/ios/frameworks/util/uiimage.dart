// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
import 'package:sounds/src/ios/frameworks/nsclasses/nsdata.dart';
import 'package:sounds/src/ios/frameworks/nsclasses/nssecurecoding.dart';
// You can uncomment this line when this package is ready.
// import 'package:foundation/foundation.dart';
// You can uncomment this line when this package is ready.
// import 'package:coregraphics/coregraphics.dart';
// You can uncomment this line when this package is ready.
// import 'package:coreimage/coreimage.dart';
// You can uncomment this line when this package is ready.
// import 'package:uikit/uikitdefines.dart';
// You can uncomment this line when this package is ready.
// import 'package:uikit/uicolor.dart';
// You can uncomment this line when this package is ready.
// import 'package:uikit/uigeometry.dart';
// You can uncomment this line when this package is ready.
// import 'package:uikit/nstextattachment.dart';

class UIImageOrientation extends NSEnum {
  const UIImageOrientation(dynamic raw) : super(raw as int);
  UIImageOrientation.fromPointer(Pointer<Void> ptr) : super(ptr.address);
}

const UIImageOrientation UIImageOrientationUp = UIImageOrientation(1);

const UIImageOrientation UIImageOrientationDown = UIImageOrientation(2);

const UIImageOrientation UIImageOrientationLeft = UIImageOrientation(3);

const UIImageOrientation UIImageOrientationRight = UIImageOrientation(4);

const UIImageOrientation UIImageOrientationUpMirrored = UIImageOrientation(5);

const UIImageOrientation UIImageOrientationDownMirrored = UIImageOrientation(6);

const UIImageOrientation UIImageOrientationLeftMirrored = UIImageOrientation(7);

const UIImageOrientation UIImageOrientationRightMirrored =
    UIImageOrientation(8);

class UIImageResizingMode extends NSEnum {
  const UIImageResizingMode(dynamic raw) : super(raw as int);
  UIImageResizingMode.fromPointer(Pointer<Void> ptr) : super(ptr.address);
}

// const UIImageResizingMode UIImageResizingModeTile = UIImageResizingMode(<Object>[object Object]);

// const UIImageResizingMode UIImageResizingModeStretch = UIImageResizingMode([object Object]);

@NativeAvailable(ios: '7.0')
class UIImageRenderingMode extends NSEnum {
  const UIImageRenderingMode(dynamic raw) : super(raw as int);
  UIImageRenderingMode.fromPointer(Pointer<Void> ptr) : super(ptr.address);
}

const UIImageRenderingMode UIImageRenderingModeAutomatic =
    UIImageRenderingMode(1);

const UIImageRenderingMode UIImageRenderingModeAlwaysOriginal =
    UIImageRenderingMode(2);

const UIImageRenderingMode UIImageRenderingModeAlwaysTemplate =
    UIImageRenderingMode(3);

@NativeAvailable(ios: '2.0')
@native
class UIImage extends NSObject with NSSecureCoding {
  UIImage([Class isa]) : super(isa ?? Class('UIImage'));
  UIImage.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

  CGSize get size {
    Pointer<Void> result =
        perform(SEL('size'), decodeRetVal: false) as Pointer<Void>;
    return CGSize.fromPointer(result);
  }

  set size(CGSize size) => perform(SEL('setSize:'), args: <dynamic>[size]);

//   CGImageRef get CGImage {
// Pointer<Void> result = perform(SEL('CGImage'), decodeRetVal: false);
//     return CGImageRef.fromPointer(result);

// }

//   set CGImage(CGImageRef CGImage) => perform(SEL('setCGImage:'), args: [CGImage]);
//   @NativeAvailable(ios: '5.0')
//   CIImage get CIImage {
// Pointer<Void> result = perform(SEL('CIImage'), decodeRetVal: false);
//     return CIImage.fromPointer(result);

// }
//   @NativeAvailable(ios: '5.0')
//   set CIImage(CIImage CIImage) => perform(SEL('setCIImage:'), args: [CIImage]);

//   UIImageOrientation get imageOrientation {
// Pointer<Void> result = perform(SEL('imageOrientation'), decodeRetVal: false);
//     return UIImageOrientation.fromPointer(result);

// }

//   set imageOrientation(UIImageOrientation imageOrientation) => perform(SEL('setImageOrientation:'), args: [imageOrientation]);
//   @NativeAvailable(ios: '4.0')
//   double get scale {
// return perform(SEL('scale'));

// }
//   @NativeAvailable(ios: '4.0')
//   set scale(double scale) => perform(SEL('setScale:'), args: [scale]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   bool get symbolImage {
// return perform(SEL('symbolImage'));

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set symbolImage(bool symbolImage) => perform(SEL('setSymbolImage:'), args: [symbolImage]);
//   @NativeAvailable(ios: '5.0')
//   UIImage get images {
// Pointer<Void> result = perform(SEL('images'), decodeRetVal: false);
//     return UIImage.fromPointer(result);

// }
//   @NativeAvailable(ios: '5.0')
//   set images(UIImage images) => perform(SEL('setImages:'), args: [images]);
//   @NativeAvailable(ios: '5.0')
//   NSTimeInterval get duration {
// Pointer<Void> result = perform(SEL('duration'), decodeRetVal: false);
//     return NSTimeInterval.fromPointer(result);

// }
//   @NativeAvailable(ios: '5.0')
//   set duration(NSTimeInterval duration) => perform(SEL('setDuration:'), args: [duration]);
//   @NativeAvailable(ios: '5.0')
//   UIEdgeInsets get capInsets {
// Pointer<Void> result = perform(SEL('capInsets'), decodeRetVal: false);
//     return UIEdgeInsets.fromPointer(result);

// }
//   @NativeAvailable(ios: '5.0')
//   set capInsets(UIEdgeInsets capInsets) => perform(SEL('setCapInsets:'), args: [capInsets]);
//   @NativeAvailable(ios: '6.0')
//   UIImageResizingMode get resizingMode {
// Pointer<Void> result = perform(SEL('resizingMode'), decodeRetVal: false);
//     return UIImageResizingMode.fromPointer(result);

// }
//   @NativeAvailable(ios: '6.0')
//   set resizingMode(UIImageResizingMode resizingMode) => perform(SEL('setResizingMode:'), args: [resizingMode]);
//   @NativeAvailable(ios: '6.0')
//   UIEdgeInsets get alignmentRectInsets {
// Pointer<Void> result = perform(SEL('alignmentRectInsets'), decodeRetVal: false);
//     return UIEdgeInsets.fromPointer(result);

// }
//   @NativeAvailable(ios: '6.0')
//   set alignmentRectInsets(UIEdgeInsets alignmentRectInsets) => perform(SEL('setAlignmentRectInsets:'), args: [alignmentRectInsets]);
//   @NativeAvailable(ios: '7.0')
//   UIImageRenderingMode get renderingMode {
// Pointer<Void> result = perform(SEL('renderingMode'), decodeRetVal: false);
//     return UIImageRenderingMode.fromPointer(result);

// }
//   @NativeAvailable(ios: '7.0')
//   set renderingMode(UIImageRenderingMode renderingMode) => perform(SEL('setRenderingMode:'), args: [renderingMode]);
//   @NativeAvailable(ios: '10.0')
//   UIGraphicsImageRendererFormat get imageRendererFormat {
// Pointer<Void> result = perform(SEL('imageRendererFormat'), decodeRetVal: false);
//     return UIGraphicsImageRendererFormat.fromPointer(result);

// }
//   @NativeAvailable(ios: '10.0')
//   set imageRendererFormat(UIGraphicsImageRendererFormat imageRendererFormat) => perform(SEL('setImageRendererFormat:'), args: [imageRendererFormat]);
//   @NativeAvailable(ios: '8.0')
//   UITraitCollection get traitCollection {
// Pointer<Void> result = perform(SEL('traitCollection'), decodeRetVal: false);
//     return UITraitCollection.fromPointer(result);

// }
//   @NativeAvailable(ios: '8.0')
//   set traitCollection(UITraitCollection traitCollection) => perform(SEL('setTraitCollection:'), args: [traitCollection]);
//   @NativeAvailable(ios: '8.0')
//   UIImageAsset get imageAsset {
// Pointer<Void> result = perform(SEL('imageAsset'), decodeRetVal: false);
//     return UIImageAsset.fromPointer(result);

// }
//   @NativeAvailable(ios: '8.0')
//   set imageAsset(UIImageAsset imageAsset) => perform(SEL('setImageAsset:'), args: [imageAsset]);
//   @NativeAvailable(ios: '9.0')
//   bool get flipsForRightToLeftLayoutDirection {
// return perform(SEL('flipsForRightToLeftLayoutDirection'));

// }
//   @NativeAvailable(ios: '9.0')
//   set flipsForRightToLeftLayoutDirection(bool flipsForRightToLeftLayoutDirection) => perform(SEL('setFlipsForRightToLeftLayoutDirection:'), args: [flipsForRightToLeftLayoutDirection]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   double get baselineOffsetFromBottom {
// return perform(SEL('baselineOffsetFromBottom'));

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set baselineOffsetFromBottom(double baselineOffsetFromBottom) => perform(SEL('setBaselineOffsetFromBottom:'), args: [baselineOffsetFromBottom]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   bool get hasBaseline {
// return perform(SEL('hasBaseline'));

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set hasBaseline(bool hasBaseline) => perform(SEL('setHasBaseline:'), args: [hasBaseline]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   UIImageConfiguration get configuration {
// Pointer<Void> result = perform(SEL('configuration'), decodeRetVal: false);
//     return UIImageConfiguration.fromPointer(result);

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set configuration(UIImageConfiguration configuration) => perform(SEL('setConfiguration:'), args: [configuration]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   UIImageSymbolConfiguration get symbolConfiguration {
// Pointer<Void> result = perform(SEL('symbolConfiguration'), decodeRetVal: false);
//     return UIImageSymbolConfiguration.fromPointer(result);

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set symbolConfiguration(UIImageSymbolConfiguration symbolConfiguration) => perform(SEL('setSymbolConfiguration:'), args: [symbolConfiguration]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   static UIImage systemImageNamed(String name) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('systemImageNamed:'), args: [name], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   static UIImage systemImageNamedWithConfiguration(String name, {UIImageConfiguration configuration}) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('systemImageNamed:withConfiguration:'), args: [name,configuration], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   static UIImage systemImageNamedCompatibleWithTraitCollection(String name, {UITraitCollection traitCollection}) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('systemImageNamed:compatibleWithTraitCollection:'), args: [name,traitCollection], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }

  static UIImage imageNamed(String name) {
    Pointer<Void> result = Class('UIImage').perform(SEL('imageNamed:'),
        args: <dynamic>[name], decodeRetVal: false) as Pointer<Void>;
    return UIImage.fromPointer(result);
  }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   static UIImage imageNamedInBundleWithConfiguration(String name, {NSBundle bundle, UIImageConfiguration configuration}) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('imageNamed:inBundle:withConfiguration:'), args: [name,bundle,configuration], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '8.0')
//   static UIImage imageNamedInBundleCompatibleWithTraitCollection(String name, {NSBundle bundle, UITraitCollection traitCollection}) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('imageNamed:inBundle:compatibleWithTraitCollection:'), args: [name,bundle,traitCollection], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }

  static UIImage imageWithContentsOfFile(String path) {
    Pointer<Void> result = Class('UIImage').perform(
        SEL('imageWithContentsOfFile:'),
        args: <dynamic>[path],
        decodeRetVal: false) as Pointer<Void>;
    return UIImage.fromPointer(result);
  }

  static UIImage imageWithData(NSData data) {
    Pointer<Void> result = Class('UIImage').perform(SEL('imageWithData:'),
        args: <dynamic>[data], decodeRetVal: false) as Pointer<Void>;
    return UIImage.fromPointer(result);
  }

  @override
  id decodeObjectOfClass(Class aClass, NSString key) {
    // TODO: implement decodeObjectOfClass
    throw UnimplementedError();
  }

  @override
  T initWithCoder<T>() {
    // TODO: implement initWithCoder
    throw UnimplementedError();
  }
//   @NativeAvailable(ios: '6.0')
//   static UIImage imageWithDataScale(NSData data, double scale) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('imageWithData:scale:'), args: [data,scale], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }

//   static UIImage imageWithCGImage(CGImageRef cgImage) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('imageWithCGImage:'), args: [cgImage], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '4.0')
//   static UIImage imageWithCGImageScaleOrientation(CGImageRef cgImage, double scale, UIImageOrientation orientation) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('imageWithCGImage:scale:orientation:'), args: [cgImage,scale,orientation], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '5.0')
//   static UIImage imageWithCIImage(CIImage ciImage) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('imageWithCIImage:'), args: [ciImage], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '6.0')
//   static UIImage imageWithCIImageScaleOrientation(CIImage ciImage, double scale, UIImageOrientation orientation) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('imageWithCIImage:scale:orientation:'), args: [ciImage,scale,orientation], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   UIImage.initWithContentsOfFile(String path)
//      : super.fromPointer(_initWithContentsOfFile(path));

//   static Pointer<Void> _initWithContentsOfFile(String path) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('initWithContentsOfFile:');
//     return msgSend(target, sel, args: [path], decodeRetVal: false);
//   }

//   UIImage.initWithData(NSData data)
//      : super.fromPointer(_initWithData(data));

//   static Pointer<Void> _initWithData(NSData data) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('initWithData:');
//     return msgSend(target, sel, args: [data], decodeRetVal: false);
//   }

//   UIImage.initWithDataScale(NSData data, double scale)
//      : super.fromPointer(_initWithDataScale(data,scale));

//   static Pointer<Void> _initWithDataScale(NSData data, double scale) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('initWithData:scale:');
//     return msgSend(target, sel, args: [data,scale], decodeRetVal: false);
//   }

//   UIImage.initWithCGImage(CGImageRef cgImage)
//      : super.fromPointer(_initWithCGImage(cgImage));

//   static Pointer<Void> _initWithCGImage(CGImageRef cgImage) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('initWithCGImage:');
//     return msgSend(target, sel, args: [cgImage], decodeRetVal: false);
//   }

//   UIImage.initWithCGImageScaleOrientation(CGImageRef cgImage, double scale, UIImageOrientation orientation)
//      : super.fromPointer(_initWithCGImageScaleOrientation(cgImage,scale,orientation));

//   static Pointer<Void> _initWithCGImageScaleOrientation(CGImageRef cgImage, double scale, UIImageOrientation orientation) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('initWithCGImage:scale:orientation:');
//     return msgSend(target, sel, args: [cgImage,scale,orientation], decodeRetVal: false);
//   }

//   UIImage.initWithCIImage(CIImage ciImage)
//      : super.fromPointer(_initWithCIImage(ciImage));

//   static Pointer<Void> _initWithCIImage(CIImage ciImage) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('initWithCIImage:');
//     return msgSend(target, sel, args: [ciImage], decodeRetVal: false);
//   }

//   UIImage.initWithCIImageScaleOrientation(CIImage ciImage, double scale, UIImageOrientation orientation)
//      : super.fromPointer(_initWithCIImageScaleOrientation(ciImage,scale,orientation));

//   static Pointer<Void> _initWithCIImageScaleOrientation(CIImage ciImage, double scale, UIImageOrientation orientation) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('initWithCIImage:scale:orientation:');
//     return msgSend(target, sel, args: [ciImage,scale,orientation], decodeRetVal: false);
//   }

//   CGImageRef CGImage() {
//     Pointer<Void> result = perform(SEL('CGImage'), decodeRetVal: false);
//     return CGImageRef.fromPointer(result);
//   }
//   @NativeAvailable(ios: '5.0')
//   static UIImage animatedImageNamedDuration(String name, NSTimeInterval duration) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('animatedImageNamed:duration:'), args: [name,duration], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '5.0')
//   static UIImage animatedResizableImageNamedCapInsetsDuration(String name, UIEdgeInsets capInsets, NSTimeInterval duration) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('animatedResizableImageNamed:capInsets:duration:'), args: [name,capInsets,duration], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '6.0')
//   static UIImage animatedResizableImageNamedCapInsetsResizingModeDuration(String name, UIEdgeInsets capInsets, UIImageResizingMode resizingMode, NSTimeInterval duration) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('animatedResizableImageNamed:capInsets:resizingMode:duration:'), args: [name,capInsets,resizingMode,duration], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }
//   @NativeAvailable(ios: '5.0')
//   static UIImage animatedImageWithImagesDuration(UIImage images, NSTimeInterval duration) {
//     Pointer<Void> result = Class('UIImage').perform(SEL('animatedImageWithImages:duration:'), args: [images,duration], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }

//   void drawAtPoint(CGPoint point) {
//      perform(SEL('drawAtPoint:'), args: [point]);
//   }

//   void drawAtPointBlendModeAlpha(CGPoint point, CGBlendMode blendMode, double alpha) {
//      perform(SEL('drawAtPoint:blendMode:alpha:'), args: [point,blendMode,alpha]);
//   }

//   void drawInRect(CGRect rect) {
//      perform(SEL('drawInRect:'), args: [rect]);
//   }

//   void drawInRectBlendModeAlpha(CGRect rect, CGBlendMode blendMode, double alpha) {
//      perform(SEL('drawInRect:blendMode:alpha:'), args: [rect,blendMode,alpha]);
//   }

//   void drawAsPatternInRect(CGRect rect) {
//      perform(SEL('drawAsPatternInRect:'), args: [rect]);
//   }
//   UIImage.resizableImageWithCapInsets(UIEdgeInsets capInsets)
//      : super.fromPointer(_resizableImageWithCapInsets(capInsets));

//   static Pointer<Void> _resizableImageWithCapInsets(UIEdgeInsets capInsets) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('resizableImageWithCapInsets:');
//     return msgSend(target, sel, args: [capInsets], decodeRetVal: false);
//   }

//   UIImage.resizableImageWithCapInsetsResizingMode(UIEdgeInsets capInsets, UIImageResizingMode resizingMode)
//      : super.fromPointer(_resizableImageWithCapInsetsResizingMode(capInsets,resizingMode));

//   static Pointer<Void> _resizableImageWithCapInsetsResizingMode(UIEdgeInsets capInsets, UIImageResizingMode resizingMode) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('resizableImageWithCapInsets:resizingMode:');
//     return msgSend(target, sel, args: [capInsets,resizingMode], decodeRetVal: false);
//   }

//   UIImage.imageWithAlignmentRectInsets(UIEdgeInsets alignmentInsets)
//      : super.fromPointer(_imageWithAlignmentRectInsets(alignmentInsets));

//   static Pointer<Void> _imageWithAlignmentRectInsets(UIEdgeInsets alignmentInsets) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithAlignmentRectInsets:');
//     return msgSend(target, sel, args: [alignmentInsets], decodeRetVal: false);
//   }

//   UIImage.imageWithRenderingMode(UIImageRenderingMode renderingMode)
//      : super.fromPointer(_imageWithRenderingMode(renderingMode));

//   static Pointer<Void> _imageWithRenderingMode(UIImageRenderingMode renderingMode) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithRenderingMode:');
//     return msgSend(target, sel, args: [renderingMode], decodeRetVal: false);
//   }

//   UIImage.imageFlippedForRightToLeftLayoutDirection()
//      : super.fromPointer(_imageFlippedForRightToLeftLayoutDirection());

//   static Pointer<Void> _imageFlippedForRightToLeftLayoutDirection() {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageFlippedForRightToLeftLayoutDirection');
//     return msgSend(target, sel, args: [], decodeRetVal: false);
//   }

//   UIImage.imageWithHorizontallyFlippedOrientation()
//      : super.fromPointer(_imageWithHorizontallyFlippedOrientation());

//   static Pointer<Void> _imageWithHorizontallyFlippedOrientation() {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithHorizontallyFlippedOrientation');
//     return msgSend(target, sel, args: [], decodeRetVal: false);
//   }

//   UIImage.imageWithBaselineOffsetFromBottom(double baselineOffset)
//      : super.fromPointer(_imageWithBaselineOffsetFromBottom(baselineOffset));

//   static Pointer<Void> _imageWithBaselineOffsetFromBottom(double baselineOffset) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithBaselineOffsetFromBottom:');
//     return msgSend(target, sel, args: [baselineOffset], decodeRetVal: false);
//   }

//   UIImage.imageWithoutBaseline()
//      : super.fromPointer(_imageWithoutBaseline());

//   static Pointer<Void> _imageWithoutBaseline() {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithoutBaseline');
//     return msgSend(target, sel, args: [], decodeRetVal: false);
//   }

//   UIImage.imageWithConfiguration(UIImageConfiguration configuration)
//      : super.fromPointer(_imageWithConfiguration(configuration));

//   static Pointer<Void> _imageWithConfiguration(UIImageConfiguration configuration) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithConfiguration:');
//     return msgSend(target, sel, args: [configuration], decodeRetVal: false);
//   }

//   UIImage.imageByApplyingSymbolConfiguration(UIImageSymbolConfiguration configuration)
//      : super.fromPointer(_imageByApplyingSymbolConfiguration(configuration));

//   static Pointer<Void> _imageByApplyingSymbolConfiguration(UIImageSymbolConfiguration configuration) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageByApplyingSymbolConfiguration:');
//     return msgSend(target, sel, args: [configuration], decodeRetVal: false);
//   }

//   UIImage.imageWithTintColor(UIColor color)
//      : super.fromPointer(_imageWithTintColor(color));

//   static Pointer<Void> _imageWithTintColor(UIColor color) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithTintColor:');
//     return msgSend(target, sel, args: [color], decodeRetVal: false);
//   }

//   UIImage.imageWithTintColorRenderingMode(UIColor color, UIImageRenderingMode renderingMode)
//      : super.fromPointer(_imageWithTintColorRenderingMode(color,renderingMode));

//   static Pointer<Void> _imageWithTintColorRenderingMode(UIColor color, UIImageRenderingMode renderingMode) {
//     Pointer<Void> target = alloc(Class('UIImage'));
//     SEL sel = SEL('imageWithTintColor:renderingMode:');
//     return msgSend(target, sel, args: [color,renderingMode], decodeRetVal: false);
//   }

// }

// extension UIImagePreconfiguredSystemImages on UIImage {
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   UIImage get actionsImage {
// Pointer<Void> result = Class('PreconfiguredSystemImages').perform(SEL('actionsImage'), decodeRetVal: false);
//     return UIImage.fromPointer(result);

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set actionsImage(UIImage actionsImage) => Class('PreconfiguredSystemImages').perform(SEL('setActionsImage:'), args: [actionsImage]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   UIImage get addImage {
// Pointer<Void> result = Class('PreconfiguredSystemImages').perform(SEL('addImage'), decodeRetVal: false);
//     return UIImage.fromPointer(result);

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set addImage(UIImage addImage) => Class('PreconfiguredSystemImages').perform(SEL('setAddImage:'), args: [addImage]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   UIImage get removeImage {
// Pointer<Void> result = Class('PreconfiguredSystemImages').perform(SEL('removeImage'), decodeRetVal: false);
//     return UIImage.fromPointer(result);

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set removeImage(UIImage removeImage) => Class('PreconfiguredSystemImages').perform(SEL('setRemoveImage:'), args: [removeImage]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   UIImage get checkmarkImage {
// Pointer<Void> result = Class('PreconfiguredSystemImages').perform(SEL('checkmarkImage'), decodeRetVal: false);
//     return UIImage.fromPointer(result);

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set checkmarkImage(UIImage checkmarkImage) => Class('PreconfiguredSystemImages').perform(SEL('setCheckmarkImage:'), args: [checkmarkImage]);
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   UIImage get strokedCheckmarkImage {
// Pointer<Void> result = Class('PreconfiguredSystemImages').perform(SEL('strokedCheckmarkImage'), decodeRetVal: false);
//     return UIImage.fromPointer(result);

// }
//   @NativeAvailable(ios: '13.0', tvos: '13.0', watchos: '6.0')
//   set strokedCheckmarkImage(UIImage strokedCheckmarkImage) => Class('PreconfiguredSystemImages').perform(SEL('setStrokedCheckmarkImage:'), args: [strokedCheckmarkImage]);

// }

// extension UIImageNSItemProvider on UIImage {

// }

// extension NSTextAttachmentUIImage on NSTextAttachment {

// }

// extension UIImageUIImageDeprecated on UIImage {

//   NSInteger get ( {
// Pointer<Void> result = perform(SEL('('), decodeRetVal: false);
//     return NSInteger.fromPointer(result);

// }

//   set ((NSInteger () => perform(SEL('set(:'), args: [(]);

//   NSInteger get ( {
// Pointer<Void> result = perform(SEL('('), decodeRetVal: false);
//     return NSInteger.fromPointer(result);

// }

//   set ((NSInteger () => perform(SEL('set(:'), args: [(]);
//   @NativeUnavailable(tvos)
//   UIImage stretchableImageWithLeftCapWidthTopCapHeight(NSInteger leftCapWidth, NSInteger topCapHeight) {
//     Pointer<Void> result = perform(SEL('stretchableImageWithLeftCapWidth:topCapHeight:'), args: [leftCapWidth,topCapHeight], decodeRetVal: false);
//     return UIImage.fromPointer(result);
//   }

// }

// extension CIImageUIKitAdditions on CIImage {
//   @NativeAvailable(ios: '5.0')
//   UIKitAdditions initWithImage(UIImage image) {
//     Pointer<Void> result = perform(SEL('initWithImage:'), args: [image], decodeRetVal: false);
//     return UIKitAdditions.fromPointer(result);
//   }
//   @NativeAvailable(ios: '5.0')
//   UIKitAdditions initWithImageOptions(UIImage image, {NSObject options}) {
//     Pointer<Void> result = perform(SEL('initWithImage:options:'), args: [image,options], decodeRetVal: false);
//     return UIKitAdditions.fromPointer(result);
//   }

}
// You can uncomment this line when this package is ready.
// import 'package:uikitcore/uiimage.dart';

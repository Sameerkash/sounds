// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:mediaplayer/mediaplayerdefines.dart';
// You can uncomment this line when this package is ready.
// import 'package:foundation/foundation.dart';
// You can uncomment this line when this package is ready.
// import 'package:mediaplayer/mpremotecontroltypes.dart';

class MPRemoteCommandHandlerStatus extends NSEnum {
  const MPRemoteCommandHandlerStatus(dynamic raw) : super(raw as int);
  MPRemoteCommandHandlerStatus.fromPointer(Pointer<Void> ptr)
      : super(ptr.address);
}

const MPRemoteCommandHandlerStatus MPRemoteCommandHandlerStatusSuccess =
    MPRemoteCommandHandlerStatus(0);

const MPRemoteCommandHandlerStatus MPRemoteCommandHandlerStatusNoSuchContent =
    MPRemoteCommandHandlerStatus(100);

const MPRemoteCommandHandlerStatus
    MPRemoteCommandHandlerStatusNoActionableNowPlayingItem =
    MPRemoteCommandHandlerStatus(110);

const MPRemoteCommandHandlerStatus MPRemoteCommandHandlerStatusDeviceNotFound =
    MPRemoteCommandHandlerStatus(120);

const MPRemoteCommandHandlerStatus MPRemoteCommandHandlerStatusCommandFailed =
    MPRemoteCommandHandlerStatus(200);

@native
class MPRemoteCommand extends NSObject {
  MPRemoteCommand([Class isa]) : super(isa ?? Class('MPRemoteCommand'));
  MPRemoteCommand.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

  bool get enabled {
    return perform(SEL('enabled')) as bool;
  }

  set enabled(bool enabled) =>
      perform(SEL('setEnabled:'), args: <dynamic>[enabled]);
}

@native
class MPSkipIntervalCommand extends MPRemoteCommand {
  MPSkipIntervalCommand([Class isa])
      : super(isa ?? Class('MPSkipIntervalCommand'));
  MPSkipIntervalCommand.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

  NSNumber get preferredIntervals {
    Pointer<Void> result =
        perform(SEL('preferredIntervals'), decodeRetVal: false)
            as Pointer<Void>;
    return NSNumber.fromPointer(result);
  }

  set preferredIntervals(NSNumber preferredIntervals) =>
      perform(SEL('setPreferredIntervals:'),
          args: <dynamic>[preferredIntervals]);
}

@native
class MPFeedbackCommand extends MPRemoteCommand {
  MPFeedbackCommand([Class isa]) : super(isa ?? Class('MPFeedbackCommand'));
  MPFeedbackCommand.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

  bool get active {
    return perform(SEL('active')) as bool;
  }

  set active(bool active) =>
      perform(SEL('setActive:'), args: <dynamic>[active]);

  String get localizedTitle {
    Pointer<Void> result =
        perform(SEL('localizedTitle'), decodeRetVal: false) as Pointer<Void>;
    return NSString.fromPointer(result).raw;
  }

  set localizedTitle(String localizedTitle) =>
      perform(SEL('setLocalizedTitle:'), args: <dynamic>[localizedTitle]);

  String get localizedShortTitle {
    Pointer<Void> result =
        perform(SEL('localizedShortTitle'), decodeRetVal: false)
            as Pointer<Void>;
    return NSString.fromPointer(result).raw;
  }

  set localizedShortTitle(String localizedShortTitle) =>
      perform(SEL('setLocalizedShortTitle:'),
          args: <dynamic>[localizedShortTitle]);
}

@native
class MPRatingCommand extends MPRemoteCommand {
  MPRatingCommand([Class isa]) : super(isa ?? Class('MPRatingCommand'));
  MPRatingCommand.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

  double get minimumRating {
    return perform(SEL('minimumRating')) as double;
  }

  set minimumRating(double minimumRating) =>
      perform(SEL('setMinimumRating:'), args: <dynamic>[minimumRating]);

  double get maximumRating {
    return perform(SEL('maximumRating')) as double;
  }

  set maximumRating(double maximumRating) =>
      perform(SEL('setMaximumRating:'), args: <dynamic>[maximumRating]);
}

@native
class MPChangePlaybackRateCommand extends MPRemoteCommand {
  MPChangePlaybackRateCommand([Class isa])
      : super(isa ?? Class('MPChangePlaybackRateCommand'));
  MPChangePlaybackRateCommand.fromPointer(Pointer<Void> ptr)
      : super.fromPointer(ptr);

  NSNumber get supportedPlaybackRates {
    Pointer<Void> result =
        perform(SEL('supportedPlaybackRates'), decodeRetVal: false)
            as Pointer<Void>;
    return NSNumber.fromPointer(result);
  }

  set supportedPlaybackRates(NSNumber supportedPlaybackRates) =>
      perform(SEL('setSupportedPlaybackRates:'),
          args: <dynamic>[supportedPlaybackRates]);
}

@native
class MPChangePlaybackPositionCommand extends MPRemoteCommand {
  MPChangePlaybackPositionCommand([Class isa])
      : super(isa ?? Class('MPChangePlaybackPositionCommand'));
  MPChangePlaybackPositionCommand.fromPointer(Pointer<Void> ptr)
      : super.fromPointer(ptr);
}

// @native
// class MPChangeShuffleModeCommand extends MPRemoteCommand {
//   MPChangeShuffleModeCommand([Class isa])
//       : super(isa ?? Class('MPChangeShuffleModeCommand'));
//   MPChangeShuffleModeCommand.fromPointer(Pointer<Void> ptr)
//       : super.fromPointer(ptr);

// MPShuffleType get currentShuffleType {
//   Pointer<Void> result =
//       perform(SEL('currentShuffleType'), decodeRetVal: false);
//   return MPShuffleType.fromPointer(result);
// }

// set currentShuffleType(MPShuffleType currentShuffleType) =>
//     perform(SEL('setCurrentShuffleType:'), args: [currentShuffleType]);
//}

// @native
// class MPChangeRepeatModeCommand extends MPRemoteCommand {
//   MPChangeRepeatModeCommand([Class isa])
//       : super(isa ?? Class('MPChangeRepeatModeCommand'));
//   MPChangeRepeatModeCommand.fromPointer(Pointer<Void> ptr)
//       : super.fromPointer(ptr);

//   MPRepeatType get currentRepeatType {
//     Pointer<Void> result =
//         perform(SEL('currentRepeatType'), decodeRetVal: false);
//     return MPRepeatType.fromPointer(result);
//   }

//   set currentRepeatType(MPRepeatType currentRepeatType) =>
//       perform(SEL('setCurrentRepeatType:'), args: [currentRepeatType]);
// }

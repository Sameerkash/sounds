// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avcaptureoutputbase.dart';

@NativeAvailable(ios: '11.0') @NativeUnavailable(macos)
@native
class AVCaptureDepthDataOutput extends AVCaptureOutput {
  AVCaptureDepthDataOutput([Class isa]) : super(isa ?? Class('AVCaptureDepthDataOutput'));
  AVCaptureDepthDataOutput.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVCaptureDepthDataOutputDelegate get delegate {
Pointer<Void> result = perform(SEL('delegate'), decodeRetVal: false);
    return AVCaptureDepthDataOutputDelegate.fromPointer(result);

}
  
  set delegate(AVCaptureDepthDataOutputDelegate delegate) => perform(SEL('setDelegate:'), args: [delegate]);
  
  dispatch_queue_t get delegateCallbackQueue {
Pointer<Void> result = perform(SEL('delegateCallbackQueue'), decodeRetVal: false);
    return dispatch_queue_t.fromPointer(result);

}
  
  set delegateCallbackQueue(dispatch_queue_t delegateCallbackQueue) => perform(SEL('setDelegateCallbackQueue:'), args: [delegateCallbackQueue]);
  
  bool get alwaysDiscardsLateDepthData {
return perform(SEL('alwaysDiscardsLateDepthData'));

}
  
  set alwaysDiscardsLateDepthData(bool alwaysDiscardsLateDepthData) => perform(SEL('setAlwaysDiscardsLateDepthData:'), args: [alwaysDiscardsLateDepthData]);
  
  bool get filteringEnabled {
return perform(SEL('filteringEnabled'));

}
  
  set filteringEnabled(bool filteringEnabled) => perform(SEL('setFilteringEnabled:'), args: [filteringEnabled]);
  AVCaptureDepthDataOutput()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVCaptureDepthDataOutput'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }

  
  static AVCaptureDepthDataOutput new() {
    Pointer<Void> result = Class('AVCaptureDepthDataOutput').perform(SEL('new'), decodeRetVal: false);
    return AVCaptureDepthDataOutput.fromPointer(result);
  }
  
  void setDelegateCallbackQueue({AVCaptureDepthDataOutputDelegate delegate, dispatch_queue_t callbackQueue}) {
     perform(SEL('setDelegate:callbackQueue:'), args: [delegate,callbackQueue]);
  }

}

@NativeAvailable(ios: '11.0') @NativeUnavailable(macos)
abstract class AVCaptureDepthDataOutputDelegate {
  registerAVCaptureDepthDataOutputDelegate() {
    registerProtocolCallback(this, depthDataOutputDidOutputDepthDataTimestampConnection, 'depthDataOutput:didOutputDepthData:timestamp:connection:', AVCaptureDepthDataOutputDelegate);
    registerProtocolCallback(this, depthDataOutputDidDropDepthDataTimestampConnectionReason, 'depthDataOutput:didDropDepthData:timestamp:connection:reason:', AVCaptureDepthDataOutputDelegate);
  }
  
  void depthDataOutputDidOutputDepthDataTimestampConnection(AVCaptureDepthDataOutput output, AVDepthData depthData, CMTime timestamp, AVCaptureConnection connection);  
  void depthDataOutputDidDropDepthDataTimestampConnectionReason(AVCaptureDepthDataOutput output, AVDepthData depthData, CMTime timestamp, AVCaptureConnection connection, AVCaptureOutputDataDroppedReason reason);
}
// You can uncomment this line when this package is ready.
// import 'package:avfcapture/avcapturedepthdataoutput.dart';
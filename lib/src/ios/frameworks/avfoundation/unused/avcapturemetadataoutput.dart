// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avcaptureoutputbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avmetadataobject.dart';

@NativeAvailable(ios: '6.0') @NativeUnavailable(macos)
@native
class AVCaptureMetadataOutput extends AVCaptureOutput {
  AVCaptureMetadataOutput([Class isa]) : super(isa ?? Class('AVCaptureMetadataOutput'));
  AVCaptureMetadataOutput.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVCaptureMetadataOutputObjectsDelegate get metadataObjectsDelegate {
Pointer<Void> result = perform(SEL('metadataObjectsDelegate'), decodeRetVal: false);
    return AVCaptureMetadataOutputObjectsDelegate.fromPointer(result);

}
  
  set metadataObjectsDelegate(AVCaptureMetadataOutputObjectsDelegate metadataObjectsDelegate) => perform(SEL('setMetadataObjectsDelegate:'), args: [metadataObjectsDelegate]);
  
  dispatch_queue_t get metadataObjectsCallbackQueue {
Pointer<Void> result = perform(SEL('metadataObjectsCallbackQueue'), decodeRetVal: false);
    return dispatch_queue_t.fromPointer(result);

}
  
  set metadataObjectsCallbackQueue(dispatch_queue_t metadataObjectsCallbackQueue) => perform(SEL('setMetadataObjectsCallbackQueue:'), args: [metadataObjectsCallbackQueue]);
  
  AVMetadataObjectType get availableMetadataObjectTypes {
Pointer<Void> result = perform(SEL('availableMetadataObjectTypes'), decodeRetVal: false);
    return AVMetadataObjectType.fromPointer(result);

}
  
  set availableMetadataObjectTypes(AVMetadataObjectType availableMetadataObjectTypes) => perform(SEL('setAvailableMetadataObjectTypes:'), args: [availableMetadataObjectTypes]);
  
  AVMetadataObjectType get metadataObjectTypes {
Pointer<Void> result = perform(SEL('metadataObjectTypes'), decodeRetVal: false);
    return AVMetadataObjectType.fromPointer(result);

}
  
  set metadataObjectTypes(AVMetadataObjectType metadataObjectTypes) => perform(SEL('setMetadataObjectTypes:'), args: [metadataObjectTypes]);
  @NativeAvailable(ios: '7.0')
  CGRect get rectOfInterest {
Pointer<Void> result = perform(SEL('rectOfInterest'), decodeRetVal: false);
    return CGRect.fromPointer(result);

}
  @NativeAvailable(ios: '7.0')
  set rectOfInterest(CGRect rectOfInterest) => perform(SEL('setRectOfInterest:'), args: [rectOfInterest]);
  AVCaptureMetadataOutput()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVCaptureMetadataOutput'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }

  
  static AVCaptureMetadataOutput new() {
    Pointer<Void> result = Class('AVCaptureMetadataOutput').perform(SEL('new'), decodeRetVal: false);
    return AVCaptureMetadataOutput.fromPointer(result);
  }
  
  void setMetadataObjectsDelegateQueue({AVCaptureMetadataOutputObjectsDelegate objectsDelegate, dispatch_queue_t objectsCallbackQueue}) {
     perform(SEL('setMetadataObjectsDelegate:queue:'), args: [objectsDelegate,objectsCallbackQueue]);
  }

}

@NativeAvailable(ios: '6.0') @NativeUnavailable(macos)
abstract class AVCaptureMetadataOutputObjectsDelegate {
  registerAVCaptureMetadataOutputObjectsDelegate() {
    registerProtocolCallback(this, captureOutputDidOutputMetadataObjectsFromConnection, 'captureOutput:didOutputMetadataObjects:fromConnection:', AVCaptureMetadataOutputObjectsDelegate);
  }
  
  void captureOutputDidOutputMetadataObjectsFromConnection(AVCaptureOutput output, AVMetadataObject metadataObjects, AVCaptureConnection connection);
}
// You can uncomment this line when this package is ready.
// import 'package:avfcapture/avcapturemetadataoutput.dart';
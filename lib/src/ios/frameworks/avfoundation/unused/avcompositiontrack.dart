// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avassettrack.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmtime.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmtimerange.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmformatdescription.dart';

@NativeAvailable(macos: '10.7', ios: '4.0', tvos: '9.0', watchos: '1.0')
@native
class AVCompositionTrack extends AVAssetTrack {
  AVCompositionTrack([Class isa]) : super(isa ?? Class('AVCompositionTrack'));
  AVCompositionTrack.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

  AVCompositionTrackSegment get segments {
    Pointer<Void> result = perform(SEL('segments'), decodeRetVal: false);
    return AVCompositionTrackSegment.fromPointer(result);
  }

  set segments(AVCompositionTrackSegment segments) =>
      perform(SEL('setSegments:'), args: [segments]);
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0', watchos: '6.0')
  AVCompositionTrackFormatDescriptionReplacement
      get formatDescriptionReplacements {
    Pointer<Void> result =
        perform(SEL('formatDescriptionReplacements'), decodeRetVal: false);
    return AVCompositionTrackFormatDescriptionReplacement.fromPointer(result);
  }

  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0', watchos: '6.0')
  set formatDescriptionReplacements(
          AVCompositionTrackFormatDescriptionReplacement
              formatDescriptionReplacements) =>
      perform(SEL('setFormatDescriptionReplacements:'),
          args: [formatDescriptionReplacements]);

  AVCompositionTrackSegment segmentForTrackTime(CMTime trackTime) {
    Pointer<Void> result = perform(SEL('segmentForTrackTime:'),
        args: [trackTime], decodeRetVal: false);
    return AVCompositionTrackSegment.fromPointer(result);
  }
}

@NativeAvailable(macos: '10.7', ios: '4.0', tvos: '9.0', watchos: '1.0')
@native
class AVMutableCompositionTrack extends AVCompositionTrack {
  AVMutableCompositionTrack([Class isa])
      : super(isa ?? Class('AVMutableCompositionTrack'));
  AVMutableCompositionTrack.fromPointer(Pointer<Void> ptr)
      : super.fromPointer(ptr);
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0')
  @NativeUnavailable(watchos)
  bool get enabled {
    return perform(SEL('enabled'));
  }

  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0')
  @NativeUnavailable(watchos)
  set enabled(bool enabled) => perform(SEL('setEnabled:'), args: [enabled]);

  CMTimeScale get naturalTimeScale {
    Pointer<Void> result =
        perform(SEL('naturalTimeScale'), decodeRetVal: false);
    return CMTimeScale.fromPointer(result);
  }

  set naturalTimeScale(CMTimeScale naturalTimeScale) =>
      perform(SEL('setNaturalTimeScale:'), args: [naturalTimeScale]);

  String get languageCode {
    Pointer<Void> result = perform(SEL('languageCode'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }

  set languageCode(String languageCode) =>
      perform(SEL('setLanguageCode:'), args: [languageCode]);

  String get extendedLanguageTag {
    Pointer<Void> result =
        perform(SEL('extendedLanguageTag'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }

  set extendedLanguageTag(String extendedLanguageTag) =>
      perform(SEL('setExtendedLanguageTag:'), args: [extendedLanguageTag]);

  CGAffineTransform get preferredTransform {
    Pointer<Void> result =
        perform(SEL('preferredTransform'), decodeRetVal: false);
    return CGAffineTransform.fromPointer(result);
  }

  set preferredTransform(CGAffineTransform preferredTransform) =>
      perform(SEL('setPreferredTransform:'), args: [preferredTransform]);

  double get preferredVolume {
    return perform(SEL('preferredVolume'));
  }

  set preferredVolume(double preferredVolume) =>
      perform(SEL('setPreferredVolume:'), args: [preferredVolume]);

  AVCompositionTrackSegment get segments {
    Pointer<Void> result = perform(SEL('segments'), decodeRetVal: false);
    return AVCompositionTrackSegment.fromPointer(result);
  }

  set segments(AVCompositionTrackSegment segments) =>
      perform(SEL('setSegments:'), args: [segments]);

  bool insertTimeRangeOfTrackAtTimeError(
      CMTimeRange timeRange, AVAssetTrack track, CMTime startTime,
      {NSObjectRef<NSError> outError}) {
    return perform(SEL('insertTimeRange:ofTrack:atTime:error:'),
        args: [timeRange, track, startTime, outError]);
  }

  @NativeAvailable(macos: '10.8', ios: '5.0', tvos: '9.0', watchos: '1.0')
  bool insertTimeRangesOfTracksAtTimeError(
      NSValue timeRanges, AVAssetTrack tracks, CMTime startTime,
      {NSObjectRef<NSError> outError}) {
    return perform(SEL('insertTimeRanges:ofTracks:atTime:error:'),
        args: [timeRanges, tracks, startTime, outError]);
  }

  void insertEmptyTimeRange(CMTimeRange timeRange) {
    perform(SEL('insertEmptyTimeRange:'), args: [timeRange]);
  }

  void removeTimeRange(CMTimeRange timeRange) {
    perform(SEL('removeTimeRange:'), args: [timeRange]);
  }

  void scaleTimeRangeToDuration(CMTimeRange timeRange, CMTime duration) {
    perform(SEL('scaleTimeRange:toDuration:'), args: [timeRange, duration]);
  }

  bool validateTrackSegmentsError(AVCompositionTrackSegment trackSegments,
      {NSObjectRef<NSError> outError}) {
    return perform(SEL('validateTrackSegments:error:'),
        args: [trackSegments, outError]);
  }

  @NativeAvailable(macos: '10.14', ios: '12.0', tvos: '12.0', watchos: '5.0')
  void addTrackAssociationToTrackType(AVCompositionTrack compositionTrack,
      AVTrackAssociationType trackAssociationType) {
    perform(SEL('addTrackAssociationToTrack:type:'),
        args: [compositionTrack, trackAssociationType]);
  }

  @NativeAvailable(macos: '10.14', ios: '12.0', tvos: '12.0', watchos: '5.0')
  void removeTrackAssociationToTrackType(AVCompositionTrack compositionTrack,
      AVTrackAssociationType trackAssociationType) {
    perform(SEL('removeTrackAssociationToTrack:type:'),
        args: [compositionTrack, trackAssociationType]);
  }
}

@NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0', watchos: '6.0')
@native
class AVCompositionTrackFormatDescriptionReplacement extends NSObject
    with NSSecureCoding {
  AVCompositionTrackFormatDescriptionReplacement([Class isa])
      : super(isa ?? Class('AVCompositionTrackFormatDescriptionReplacement'));
  AVCompositionTrackFormatDescriptionReplacement.fromPointer(Pointer<Void> ptr)
      : super.fromPointer(ptr);

  CMFormatDescriptionRef get originalFormatDescription {
    Pointer<Void> result =
        perform(SEL('originalFormatDescription'), decodeRetVal: false);
    return CMFormatDescriptionRef.fromPointer(result);
  }

  set originalFormatDescription(
          CMFormatDescriptionRef originalFormatDescription) =>
      perform(SEL('setOriginalFormatDescription:'),
          args: [originalFormatDescription]);

  CMFormatDescriptionRef get replacementFormatDescription {
    Pointer<Void> result =
        perform(SEL('replacementFormatDescription'), decodeRetVal: false);
    return CMFormatDescriptionRef.fromPointer(result);
  }

  set replacementFormatDescription(
          CMFormatDescriptionRef replacementFormatDescription) =>
      perform(SEL('setReplacementFormatDescription:'),
          args: [replacementFormatDescription]);
}

extension AVMutableCompositionTrackAVMutableCompositionTrackFormatDescriptionReplacement
    on AVMutableCompositionTrack {
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0', watchos: '6.0')
  void replaceFormatDescriptionWithFormatDescription(
      CMFormatDescriptionRef originalFormatDescription,
      {CMFormatDescriptionRef replacementFormatDescription}) {
    perform(SEL('replaceFormatDescription:withFormatDescription:'),
        args: [originalFormatDescription, replacementFormatDescription]);
  }
}
// You can uncomment this line when this package is ready.
// import 'package:avfcore/avcompositiontrack.dart';

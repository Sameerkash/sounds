// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avcaptureoutputbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avvideosettings.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmsamplebuffer.dart';

@NativeDeprecated("Use AVCapturePhotoOutput instead.", macos: ['10.7', '10.15'], ios: ['4.0', '10.0'])
@native
class AVCaptureStillImageOutput extends AVCaptureOutput {
  AVCaptureStillImageOutput([Class isa]) : super(isa ?? Class('AVCaptureStillImageOutput'));
  AVCaptureStillImageOutput.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  id get outputSettings {
Pointer<Void> result = perform(SEL('outputSettings'), decodeRetVal: false);
    return id.fromPointer(result);

}
  
  set outputSettings(id outputSettings) => perform(SEL('setOutputSettings:'), args: [outputSettings]);
  
  NSNumber get availableImageDataCVPixelFormatTypes {
Pointer<Void> result = perform(SEL('availableImageDataCVPixelFormatTypes'), decodeRetVal: false);
    return NSNumber.fromPointer(result);

}
  
  set availableImageDataCVPixelFormatTypes(NSNumber availableImageDataCVPixelFormatTypes) => perform(SEL('setAvailableImageDataCVPixelFormatTypes:'), args: [availableImageDataCVPixelFormatTypes]);
  
  AVVideoCodecType get availableImageDataCodecTypes {
Pointer<Void> result = perform(SEL('availableImageDataCodecTypes'), decodeRetVal: false);
    return AVVideoCodecType.fromPointer(result);

}
  
  set availableImageDataCodecTypes(AVVideoCodecType availableImageDataCodecTypes) => perform(SEL('setAvailableImageDataCodecTypes:'), args: [availableImageDataCodecTypes]);
  @NativeAvailable(ios: '7.0') @NativeUnavailable(macos)
  bool get stillImageStabilizationSupported {
return perform(SEL('stillImageStabilizationSupported'));

}
  @NativeAvailable(ios: '7.0') @NativeUnavailable(macos)
  set stillImageStabilizationSupported(bool stillImageStabilizationSupported) => perform(SEL('setStillImageStabilizationSupported:'), args: [stillImageStabilizationSupported]);
  @NativeAvailable(ios: '7.0') @NativeUnavailable(macos)
  bool get automaticallyEnablesStillImageStabilizationWhenAvailable {
return perform(SEL('automaticallyEnablesStillImageStabilizationWhenAvailable'));

}
  @NativeAvailable(ios: '7.0') @NativeUnavailable(macos)
  set automaticallyEnablesStillImageStabilizationWhenAvailable(bool automaticallyEnablesStillImageStabilizationWhenAvailable) => perform(SEL('setAutomaticallyEnablesStillImageStabilizationWhenAvailable:'), args: [automaticallyEnablesStillImageStabilizationWhenAvailable]);
  @NativeAvailable(ios: '7.0') @NativeUnavailable(macos)
  bool get stillImageStabilizationActive {
return perform(SEL('stillImageStabilizationActive'));

}
  @NativeAvailable(ios: '7.0') @NativeUnavailable(macos)
  set stillImageStabilizationActive(bool stillImageStabilizationActive) => perform(SEL('setStillImageStabilizationActive:'), args: [stillImageStabilizationActive]);
  @NativeAvailable(macos: '10.14', ios: '8.0')
  bool get highResolutionStillImageOutputEnabled {
return perform(SEL('highResolutionStillImageOutputEnabled'));

}
  @NativeAvailable(macos: '10.14', ios: '8.0')
  set highResolutionStillImageOutputEnabled(bool highResolutionStillImageOutputEnabled) => perform(SEL('setHighResolutionStillImageOutputEnabled:'), args: [highResolutionStillImageOutputEnabled]);
  @NativeAvailable(macos: '10.8', ios: '5.0')
  bool get capturingStillImage {
return perform(SEL('capturingStillImage'));

}
  @NativeAvailable(macos: '10.8', ios: '5.0')
  set capturingStillImage(bool capturingStillImage) => perform(SEL('setCapturingStillImage:'), args: [capturingStillImage]);
  AVCaptureStillImageOutput()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVCaptureStillImageOutput'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }

  
  static AVCaptureStillImageOutput new() {
    Pointer<Void> result = Class('AVCaptureStillImageOutput').perform(SEL('new'), decodeRetVal: false);
    return AVCaptureStillImageOutput.fromPointer(result);
  }
  
  void captureStillImageAsynchronouslyFromConnectionCompletionHandler(AVCaptureConnection connection, {void handler(CMSampleBufferRef imageDataSampleBuffer, NSError error)}) {
     perform(SEL('captureStillImageAsynchronouslyFromConnection:completionHandler:'), args: [connection,handler]);
  }
  
  static NSData jpegStillImageNSDataRepresentation(CMSampleBufferRef jpegSampleBuffer) {
    Pointer<Void> result = Class('AVCaptureStillImageOutput').perform(SEL('jpegStillImageNSDataRepresentation:'), args: [jpegSampleBuffer], decodeRetVal: false);
    return NSData.fromPointer(result);
  }

}

@NativeAvailable(ios: '8.0') @NativeUnavailable(macos)
@native
class AVCaptureBracketedStillImageSettings extends NSObject {
  AVCaptureBracketedStillImageSettings([Class isa]) : super(isa ?? Class('AVCaptureBracketedStillImageSettings'));
  AVCaptureBracketedStillImageSettings.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

}

@NativeAvailable(ios: '8.0') @NativeUnavailable(macos)
@native
class AVCaptureManualExposureBracketedStillImageSettings extends AVCaptureBracketedStillImageSettings {
  AVCaptureManualExposureBracketedStillImageSettings([Class isa]) : super(isa ?? Class('AVCaptureManualExposureBracketedStillImageSettings'));
  AVCaptureManualExposureBracketedStillImageSettings.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  CMTime get exposureDuration {
Pointer<Void> result = perform(SEL('exposureDuration'), decodeRetVal: false);
    return CMTime.fromPointer(result);

}
  
  set exposureDuration(CMTime exposureDuration) => perform(SEL('setExposureDuration:'), args: [exposureDuration]);
  
  double get ISO {
return perform(SEL('ISO'));

}
  
  set ISO(double ISO) => perform(SEL('setISO:'), args: [ISO]);
  
  static AVCaptureManualExposureBracketedStillImageSettings manualExposureSettingsWithExposureDurationISO(CMTime duration, double ISO) {
    Pointer<Void> result = Class('AVCaptureManualExposureBracketedStillImageSettings').perform(SEL('manualExposureSettingsWithExposureDuration:ISO:'), args: [duration,ISO], decodeRetVal: false);
    return AVCaptureManualExposureBracketedStillImageSettings.fromPointer(result);
  }

}

@NativeAvailable(ios: '8.0') @NativeUnavailable(macos)
@native
class AVCaptureAutoExposureBracketedStillImageSettings extends AVCaptureBracketedStillImageSettings {
  AVCaptureAutoExposureBracketedStillImageSettings([Class isa]) : super(isa ?? Class('AVCaptureAutoExposureBracketedStillImageSettings'));
  AVCaptureAutoExposureBracketedStillImageSettings.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  double get exposureTargetBias {
return perform(SEL('exposureTargetBias'));

}
  
  set exposureTargetBias(double exposureTargetBias) => perform(SEL('setExposureTargetBias:'), args: [exposureTargetBias]);
  
  static AVCaptureAutoExposureBracketedStillImageSettings autoExposureSettingsWithExposureTargetBias(double exposureTargetBias) {
    Pointer<Void> result = Class('AVCaptureAutoExposureBracketedStillImageSettings').perform(SEL('autoExposureSettingsWithExposureTargetBias:'), args: [exposureTargetBias], decodeRetVal: false);
    return AVCaptureAutoExposureBracketedStillImageSettings.fromPointer(result);
  }

}

extension AVCaptureStillImageOutputAVCaptureStillImageOutputBracketedCapture on AVCaptureStillImageOutput {
  @NativeDeprecated("Use AVCapturePhotoOutput maxBracketedCapturePhotoCount instead.", ios: ['8.0', '10.0']) @NativeUnavailable(macos)
  NSUInteger get maxBracketedCaptureStillImageCount {
return perform(SEL('maxBracketedCaptureStillImageCount'));

}
  @NativeDeprecated("Use AVCapturePhotoOutput maxBracketedCapturePhotoCount instead.", ios: ['8.0', '10.0']) @NativeUnavailable(macos)
  set maxBracketedCaptureStillImageCount(NSUInteger maxBracketedCaptureStillImageCount) => perform(SEL('setMaxBracketedCaptureStillImageCount:'), args: [maxBracketedCaptureStillImageCount]);
  @NativeDeprecated("Use AVCapturePhotoOutput lensStabilizationDuringBracketedCaptureSupported instead.", ios: ['9.0', '10.0']) @NativeUnavailable(macos)
  bool get lensStabilizationDuringBracketedCaptureSupported {
return perform(SEL('lensStabilizationDuringBracketedCaptureSupported'));

}
  @NativeDeprecated("Use AVCapturePhotoOutput lensStabilizationDuringBracketedCaptureSupported instead.", ios: ['9.0', '10.0']) @NativeUnavailable(macos)
  set lensStabilizationDuringBracketedCaptureSupported(bool lensStabilizationDuringBracketedCaptureSupported) => perform(SEL('setLensStabilizationDuringBracketedCaptureSupported:'), args: [lensStabilizationDuringBracketedCaptureSupported]);
  @NativeDeprecated("Use AVCapturePhotoOutput with AVCapturePhotoBracketSettings instead.", ios: ['9.0', '10.0']) @NativeUnavailable(macos)
  bool get lensStabilizationDuringBracketedCaptureEnabled {
return perform(SEL('lensStabilizationDuringBracketedCaptureEnabled'));

}
  @NativeDeprecated("Use AVCapturePhotoOutput with AVCapturePhotoBracketSettings instead.", ios: ['9.0', '10.0']) @NativeUnavailable(macos)
  set lensStabilizationDuringBracketedCaptureEnabled(bool lensStabilizationDuringBracketedCaptureEnabled) => perform(SEL('setLensStabilizationDuringBracketedCaptureEnabled:'), args: [lensStabilizationDuringBracketedCaptureEnabled]);
  @NativeDeprecated("Use AVCapturePhotoOutput setPreparedPhotoSettingsArray:completionHandler: instead.", ios: ['8.0', '10.0']) @NativeUnavailable(macos)
  void prepareToCaptureStillImageBracketFromConnectionWithSettingsArrayCompletionHandler(AVCaptureConnection connection, AVCaptureBracketedStillImageSettings settings, {void handler(BOOL prepared, NSError error)}) {
     perform(SEL('prepareToCaptureStillImageBracketFromConnection:withSettingsArray:completionHandler:'), args: [connection,settings,handler]);
  }
  @NativeDeprecated("Use AVCapturePhotoOutput capturePhotoWithSettings:delegate: instead.", ios: ['8.0', '10.0']) @NativeUnavailable(macos)
  void captureStillImageBracketAsynchronouslyFromConnectionWithSettingsArrayCompletionHandler(AVCaptureConnection connection, AVCaptureBracketedStillImageSettings settings, {void handler(CMSampleBufferRef sampleBuffer, AVCaptureBracketedStillImageSettings stillImageSettings, NSError error)}) {
     perform(SEL('captureStillImageBracketAsynchronouslyFromConnection:withSettingsArray:completionHandler:'), args: [connection,settings,handler]);
  }

}
// You can uncomment this line when this package is ready.
// import 'package:avfcapture/avcapturestillimageoutput.dart';
// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avcaptureoutputbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avvideosettings.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmsamplebuffer.dart';

@NativeAvailable(macos: '10.7', ios: '4.0')
@native
class AVCaptureVideoDataOutput extends AVCaptureOutput {
  AVCaptureVideoDataOutput([Class isa]) : super(isa ?? Class('AVCaptureVideoDataOutput'));
  AVCaptureVideoDataOutput.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVCaptureVideoDataOutputSampleBufferDelegate get sampleBufferDelegate {
Pointer<Void> result = perform(SEL('sampleBufferDelegate'), decodeRetVal: false);
    return AVCaptureVideoDataOutputSampleBufferDelegate.fromPointer(result);

}
  
  set sampleBufferDelegate(AVCaptureVideoDataOutputSampleBufferDelegate sampleBufferDelegate) => perform(SEL('setSampleBufferDelegate:'), args: [sampleBufferDelegate]);
  
  dispatch_queue_t get sampleBufferCallbackQueue {
Pointer<Void> result = perform(SEL('sampleBufferCallbackQueue'), decodeRetVal: false);
    return dispatch_queue_t.fromPointer(result);

}
  
  set sampleBufferCallbackQueue(dispatch_queue_t sampleBufferCallbackQueue) => perform(SEL('setSampleBufferCallbackQueue:'), args: [sampleBufferCallbackQueue]);
  
  id get videoSettings {
Pointer<Void> result = perform(SEL('videoSettings'), decodeRetVal: false);
    return id.fromPointer(result);

}
  
  set videoSettings(id videoSettings) => perform(SEL('setVideoSettings:'), args: [videoSettings]);
  @NativeAvailable(ios: '5.0')
  NSNumber get availableVideoCVPixelFormatTypes {
Pointer<Void> result = perform(SEL('availableVideoCVPixelFormatTypes'), decodeRetVal: false);
    return NSNumber.fromPointer(result);

}
  @NativeAvailable(ios: '5.0')
  set availableVideoCVPixelFormatTypes(NSNumber availableVideoCVPixelFormatTypes) => perform(SEL('setAvailableVideoCVPixelFormatTypes:'), args: [availableVideoCVPixelFormatTypes]);
  @NativeAvailable(ios: '5.0')
  AVVideoCodecType get availableVideoCodecTypes {
Pointer<Void> result = perform(SEL('availableVideoCodecTypes'), decodeRetVal: false);
    return AVVideoCodecType.fromPointer(result);

}
  @NativeAvailable(ios: '5.0')
  set availableVideoCodecTypes(AVVideoCodecType availableVideoCodecTypes) => perform(SEL('setAvailableVideoCodecTypes:'), args: [availableVideoCodecTypes]);
  @NativeDeprecated("Use AVCaptureConnection's videoMinFrameDuration property instead.", ios: ['4.0', '5.0']) @NativeUnavailable(macos)
  CMTime get minFrameDuration {
Pointer<Void> result = perform(SEL('minFrameDuration'), decodeRetVal: false);
    return CMTime.fromPointer(result);

}
  @NativeDeprecated("Use AVCaptureConnection's videoMinFrameDuration property instead.", ios: ['4.0', '5.0']) @NativeUnavailable(macos)
  set minFrameDuration(CMTime minFrameDuration) => perform(SEL('setMinFrameDuration:'), args: [minFrameDuration]);
  
  bool get alwaysDiscardsLateVideoFrames {
return perform(SEL('alwaysDiscardsLateVideoFrames'));

}
  
  set alwaysDiscardsLateVideoFrames(bool alwaysDiscardsLateVideoFrames) => perform(SEL('setAlwaysDiscardsLateVideoFrames:'), args: [alwaysDiscardsLateVideoFrames]);
  @NativeAvailable(ios: '13.0') @NativeUnavailable(macos) @NativeUnavailable(watchos, tvos)
  bool get automaticallyConfiguresOutputBufferDimensions {
return perform(SEL('automaticallyConfiguresOutputBufferDimensions'));

}
  @NativeAvailable(ios: '13.0') @NativeUnavailable(macos) @NativeUnavailable(watchos, tvos)
  set automaticallyConfiguresOutputBufferDimensions(bool automaticallyConfiguresOutputBufferDimensions) => perform(SEL('setAutomaticallyConfiguresOutputBufferDimensions:'), args: [automaticallyConfiguresOutputBufferDimensions]);
  @NativeAvailable(ios: '13.0') @NativeUnavailable(macos) @NativeUnavailable(watchos, tvos)
  bool get deliversPreviewSizedOutputBuffers {
return perform(SEL('deliversPreviewSizedOutputBuffers'));

}
  @NativeAvailable(ios: '13.0') @NativeUnavailable(macos) @NativeUnavailable(watchos, tvos)
  set deliversPreviewSizedOutputBuffers(bool deliversPreviewSizedOutputBuffers) => perform(SEL('setDeliversPreviewSizedOutputBuffers:'), args: [deliversPreviewSizedOutputBuffers]);
  AVCaptureVideoDataOutput()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVCaptureVideoDataOutput'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }

  
  static AVCaptureVideoDataOutput new() {
    Pointer<Void> result = Class('AVCaptureVideoDataOutput').perform(SEL('new'), decodeRetVal: false);
    return AVCaptureVideoDataOutput.fromPointer(result);
  }
  
  void setSampleBufferDelegateQueue({AVCaptureVideoDataOutputSampleBufferDelegate sampleBufferDelegate, dispatch_queue_t sampleBufferCallbackQueue}) {
     perform(SEL('setSampleBufferDelegate:queue:'), args: [sampleBufferDelegate,sampleBufferCallbackQueue]);
  }
  @NativeAvailable(macos: '10.15', ios: '7.0')
  NSObject recommendedVideoSettingsForAssetWriterWithOutputFileType(AVFileType outputFileType) {
    Pointer<Void> result = perform(SEL('recommendedVideoSettingsForAssetWriterWithOutputFileType:'), args: [outputFileType], decodeRetVal: false);
    return NSObject.fromPointer(result);
  }
  @NativeAvailable(macos: '10.15', ios: '11.0')
  AVVideoCodecType availableVideoCodecTypesForAssetWriterWithOutputFileType(AVFileType outputFileType) {
    Pointer<Void> result = perform(SEL('availableVideoCodecTypesForAssetWriterWithOutputFileType:'), args: [outputFileType], decodeRetVal: false);
    return AVVideoCodecType.fromPointer(result);
  }
  @NativeAvailable(macos: '10.15', ios: '11.0')
  Map recommendedVideoSettingsForVideoCodecTypeAssetWriterOutputFileType(AVVideoCodecType videoCodecType, AVFileType outputFileType) {
    Pointer<Void> result = perform(SEL('recommendedVideoSettingsForVideoCodecType:assetWriterOutputFileType:'), args: [videoCodecType,outputFileType], decodeRetVal: false);
    return NSDictionary.fromPointer(result).raw;
  }

}

@NativeAvailable(macos: '10.7', ios: '4.0')
abstract class AVCaptureVideoDataOutputSampleBufferDelegate {
  registerAVCaptureVideoDataOutputSampleBufferDelegate() {
    registerProtocolCallback(this, captureOutputDidOutputSampleBufferFromConnection, 'captureOutput:didOutputSampleBuffer:fromConnection:', AVCaptureVideoDataOutputSampleBufferDelegate);
    registerProtocolCallback(this, captureOutputDidDropSampleBufferFromConnection, 'captureOutput:didDropSampleBuffer:fromConnection:', AVCaptureVideoDataOutputSampleBufferDelegate);
  }
  
  void captureOutputDidOutputSampleBufferFromConnection(AVCaptureOutput output, CMSampleBufferRef sampleBuffer, AVCaptureConnection connection);  @NativeAvailable(ios: '6.0')
  void captureOutputDidDropSampleBufferFromConnection(AVCaptureOutput output, CMSampleBufferRef sampleBuffer, AVCaptureConnection connection);
}
// You can uncomment this line when this package is ready.
// import 'package:avfcapture/avcapturevideodataoutput.dart';
// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmsamplebuffer.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmsync.dart';

@NativeAvailable(macos: '10.10', ios: '8.0', tvos: '10.2', watchos: '1.0')
class AVQueuedSampleBufferRenderingStatus extends NSEnum {
  const AVQueuedSampleBufferRenderingStatus(dynamic raw) : super(raw);
  AVQueuedSampleBufferRenderingStatus.fromPointer(Pointer<Void> ptr)
      : super(ptr.address);
}

const AVQueuedSampleBufferRenderingStatus
    AVQueuedSampleBufferRenderingStatusUnknown =
    AVQueuedSampleBufferRenderingStatus(0);

const AVQueuedSampleBufferRenderingStatus
    AVQueuedSampleBufferRenderingStatusRendering =
    AVQueuedSampleBufferRenderingStatus(1);

const AVQueuedSampleBufferRenderingStatus
    AVQueuedSampleBufferRenderingStatusFailed =
    AVQueuedSampleBufferRenderingStatus(2);

@NativeAvailable(macos: '10.13', ios: '11.0', tvos: '11.0', watchos: '4.0')
abstract class AVQueuedSampleBufferRendering {
  registerAVQueuedSampleBufferRendering() {
    registerProtocolCallback(this, enqueueSampleBuffer, 'enqueueSampleBuffer:',
        AVQueuedSampleBufferRendering);
    registerProtocolCallback(
        this, flush, 'flush', AVQueuedSampleBufferRendering);
    registerProtocolCallback(
        this,
        requestMediaDataWhenReadyOnQueueUsingBlock,
        'requestMediaDataWhenReadyOnQueue:usingBlock:',
        AVQueuedSampleBufferRendering);
    registerProtocolCallback(this, stopRequestingMediaData,
        'stopRequestingMediaData', AVQueuedSampleBufferRendering);
  }

  bool get readyForMoreMediaData {
    return perform(SEL('readyForMoreMediaData'));
  }

  set readyForMoreMediaData(bool readyForMoreMediaData) =>
      perform(SEL('setReadyForMoreMediaData:'), args: [readyForMoreMediaData]);

  void enqueueSampleBuffer(CMSampleBufferRef sampleBuffer);
  void flush();
  void requestMediaDataWhenReadyOnQueueUsingBlock(
      dispatch_queue_t queue, void block());
  void stopRequestingMediaData();
}
// You can uncomment this line when this package is ready.
// import 'package:avfcore/avqueuedsamplebufferrendering.dart';

// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avmediaformat.dart';
// You can uncomment this line when this package is ready.
// import 'package:foundation/foundation.dart';

@NativeAvailable(macos: '10.8', ios: '5.0', tvos: '9.0', watchos: '1.0')
@native
class AVMediaSelectionGroup extends NSObject with NSCopying {
  AVMediaSelectionGroup([Class isa])
      : super(isa ?? Class('AVMediaSelectionGroup'));
  AVMediaSelectionGroup.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);

  AVMediaSelectionOption get options {
    Pointer<Void> result = perform(SEL('options'), decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }

  set options(AVMediaSelectionOption options) =>
      perform(SEL('setOptions:'), args: [options]);
  @NativeAvailable(macos: '10.10', ios: '8.0', tvos: '9.0', watchos: '1.0')
  AVMediaSelectionOption get defaultOption {
    Pointer<Void> result = perform(SEL('defaultOption'), decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }

  @NativeAvailable(macos: '10.10', ios: '8.0', tvos: '9.0', watchos: '1.0')
  set defaultOption(AVMediaSelectionOption defaultOption) =>
      perform(SEL('setDefaultOption:'), args: [defaultOption]);

  bool get allowsEmptySelection {
    return perform(SEL('allowsEmptySelection'));
  }

  set allowsEmptySelection(bool allowsEmptySelection) =>
      perform(SEL('setAllowsEmptySelection:'), args: [allowsEmptySelection]);

  AVMediaSelectionOption mediaSelectionOptionWithPropertyList(NSObject plist) {
    Pointer<Void> result = perform(SEL('mediaSelectionOptionWithPropertyList:'),
        args: [plist], decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }
}

extension AVMediaSelectionGroupAVMediaSelectionOptionFiltering
    on AVMediaSelectionGroup {
  static AVMediaSelectionOption playableMediaSelectionOptionsFromArray(
      AVMediaSelectionOption mediaSelectionOptions) {
    Pointer<Void> result = Class('AVMediaSelectionOptionFiltering').perform(
        SEL('playableMediaSelectionOptionsFromArray:'),
        args: [mediaSelectionOptions],
        decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }

  @NativeAvailable(macos: '10.8', ios: '6.0', tvos: '9.0', watchos: '1.0')
  static AVMediaSelectionOption
      mediaSelectionOptionsFromArrayFilteredAndSortedAccordingToPreferredLanguages(
          AVMediaSelectionOption mediaSelectionOptions,
          String preferredLanguages) {
    Pointer<Void> result = Class('AVMediaSelectionOptionFiltering').perform(
        SEL('mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:'),
        args: [mediaSelectionOptions, preferredLanguages],
        decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }

  static AVMediaSelectionOption mediaSelectionOptionsFromArrayWithLocale(
      AVMediaSelectionOption mediaSelectionOptions, NSLocale locale) {
    Pointer<Void> result = Class('AVMediaSelectionOptionFiltering').perform(
        SEL('mediaSelectionOptionsFromArray:withLocale:'),
        args: [mediaSelectionOptions, locale],
        decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }

  static AVMediaSelectionOption
      mediaSelectionOptionsFromArrayWithMediaCharacteristics(
          AVMediaSelectionOption mediaSelectionOptions,
          AVMediaCharacteristic mediaCharacteristics) {
    Pointer<Void> result = Class('AVMediaSelectionOptionFiltering').perform(
        SEL('mediaSelectionOptionsFromArray:withMediaCharacteristics:'),
        args: [mediaSelectionOptions, mediaCharacteristics],
        decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }

  static AVMediaSelectionOption
      mediaSelectionOptionsFromArrayWithoutMediaCharacteristics(
          AVMediaSelectionOption mediaSelectionOptions,
          AVMediaCharacteristic mediaCharacteristics) {
    Pointer<Void> result = Class('AVMediaSelectionOptionFiltering').perform(
        SEL('mediaSelectionOptionsFromArray:withoutMediaCharacteristics:'),
        args: [mediaSelectionOptions, mediaCharacteristics],
        decodeRetVal: false);
    return AVMediaSelectionOption.fromPointer(result);
  }
}

@NativeAvailable(macos: '10.8', ios: '5.0', tvos: '9.0', watchos: '1.0')
@native
class AVMediaSelectionOption extends NSObject with NSCopying {
  AVMediaSelectionOption([Class isa])
      : super(isa ?? Class('AVMediaSelectionOption'));
  AVMediaSelectionOption.fromPointer(Pointer<Void> ptr)
      : super.fromPointer(ptr);

  AVMediaType get mediaType {
    Pointer<Void> result = perform(SEL('mediaType'), decodeRetVal: false);
    return AVMediaType.fromPointer(result);
  }

  set mediaType(AVMediaType mediaType) =>
      perform(SEL('setMediaType:'), args: [mediaType]);

  NSNumber get mediaSubTypes {
    Pointer<Void> result = perform(SEL('mediaSubTypes'), decodeRetVal: false);
    return NSNumber.fromPointer(result);
  }

  set mediaSubTypes(NSNumber mediaSubTypes) =>
      perform(SEL('setMediaSubTypes:'), args: [mediaSubTypes]);

  bool get playable {
    return perform(SEL('playable'));
  }

  set playable(bool playable) => perform(SEL('setPlayable:'), args: [playable]);
  @NativeAvailable(macos: '10.9', ios: '7.0', tvos: '9.0', watchos: '1.0')
  String get extendedLanguageTag {
    Pointer<Void> result =
        perform(SEL('extendedLanguageTag'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }

  @NativeAvailable(macos: '10.9', ios: '7.0', tvos: '9.0', watchos: '1.0')
  set extendedLanguageTag(String extendedLanguageTag) =>
      perform(SEL('setExtendedLanguageTag:'), args: [extendedLanguageTag]);

  NSLocale get locale {
    Pointer<Void> result = perform(SEL('locale'), decodeRetVal: false);
    return NSLocale.fromPointer(result);
  }

  set locale(NSLocale locale) => perform(SEL('setLocale:'), args: [locale]);

  AVMetadataItem get commonMetadata {
    Pointer<Void> result = perform(SEL('commonMetadata'), decodeRetVal: false);
    return AVMetadataItem.fromPointer(result);
  }

  set commonMetadata(AVMetadataItem commonMetadata) =>
      perform(SEL('setCommonMetadata:'), args: [commonMetadata]);

  NSString get availableMetadataFormats {
    Pointer<Void> result =
        perform(SEL('availableMetadataFormats'), decodeRetVal: false);
    return NSString.fromPointer(result);
  }

  set availableMetadataFormats(NSString availableMetadataFormats) =>
      perform(SEL('setAvailableMetadataFormats:'),
          args: [availableMetadataFormats]);
  @NativeAvailable(macos: '10.9', ios: '7.0', tvos: '9.0', watchos: '1.0')
  String get displayName {
    Pointer<Void> result = perform(SEL('displayName'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }

  @NativeAvailable(macos: '10.9', ios: '7.0', tvos: '9.0', watchos: '1.0')
  set displayName(String displayName) =>
      perform(SEL('setDisplayName:'), args: [displayName]);

  bool hasMediaCharacteristic(AVMediaCharacteristic mediaCharacteristic) {
    return perform(SEL('hasMediaCharacteristic:'), args: [mediaCharacteristic]);
  }

  AVMetadataItem metadataForFormat(String format) {
    Pointer<Void> result =
        perform(SEL('metadataForFormat:'), args: [format], decodeRetVal: false);
    return AVMetadataItem.fromPointer(result);
  }

  AVMediaSelectionOption(AVMediaSelectionGroup mediaSelectionGroup)
      : super.fromPointer(_associatedMediaSelectionOptionInMediaSelectionGroup(
            mediaSelectionGroup));

  static Pointer<Void> _associatedMediaSelectionOptionInMediaSelectionGroup(
      AVMediaSelectionGroup mediaSelectionGroup) {
    Pointer<Void> target = alloc(Class('AVMediaSelectionOption'));
    SEL sel = SEL('associatedMediaSelectionOptionInMediaSelectionGroup:');
    return msgSend(target, sel,
        args: [mediaSelectionGroup], decodeRetVal: false);
  }

  NSObject propertyList() {
    Pointer<Void> result = perform(SEL('propertyList'), decodeRetVal: false);
    return NSObject.fromPointer(result);
  }

  @NativeAvailable(macos: '10.9', ios: '7.0', tvos: '9.0', watchos: '1.0')
  String displayNameWithLocale(NSLocale locale) {
    Pointer<Void> result = perform(SEL('displayNameWithLocale:'),
        args: [locale], decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }
}
// You can uncomment this line when this package is ready.
// import 'package:avfcore/avmediaselectiongroup.dart';

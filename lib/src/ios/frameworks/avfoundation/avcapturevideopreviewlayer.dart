// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:quartzcore/quartzcore.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avcapturesession.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avanimation.dart';

@NativeAvailable(macos: '10.7', ios: '4.0')
@native
class AVCaptureVideoPreviewLayer extends CALayer {
  AVCaptureVideoPreviewLayer([Class isa]) : super(isa ?? Class('AVCaptureVideoPreviewLayer'));
  AVCaptureVideoPreviewLayer.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVCaptureSession get session {
Pointer<Void> result = perform(SEL('session'), decodeRetVal: false);
    return AVCaptureSession.fromPointer(result);

}
  
  set session(AVCaptureSession session) => perform(SEL('setSession:'), args: [session]);
  @NativeAvailable(ios: '6.0')
  AVCaptureConnection get connection {
Pointer<Void> result = perform(SEL('connection'), decodeRetVal: false);
    return AVCaptureConnection.fromPointer(result);

}
  @NativeAvailable(ios: '6.0')
  set connection(AVCaptureConnection connection) => perform(SEL('setConnection:'), args: [connection]);
  
  AVLayerVideoGravity get videoGravity {
Pointer<Void> result = perform(SEL('videoGravity'), decodeRetVal: false);
    return AVLayerVideoGravity.fromPointer(result);

}
  
  set videoGravity(AVLayerVideoGravity videoGravity) => perform(SEL('setVideoGravity:'), args: [videoGravity]);
  @NativeAvailable(ios: '13.0') @NativeUnavailable(macos) @NativeUnavailable(tvos, watchos)
  bool get previewing {
return perform(SEL('previewing'));

}
  @NativeAvailable(ios: '13.0') @NativeUnavailable(macos) @NativeUnavailable(tvos, watchos)
  set previewing(bool previewing) => perform(SEL('setPreviewing:'), args: [previewing]);
  @NativeDeprecated("Use AVCaptureConnection's isVideoOrientationSupported instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  bool get orientationSupported {
return perform(SEL('orientationSupported'));

}
  @NativeDeprecated("Use AVCaptureConnection's isVideoOrientationSupported instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  set orientationSupported(bool orientationSupported) => perform(SEL('setOrientationSupported:'), args: [orientationSupported]);
  @NativeDeprecated("Use AVCaptureConnection's videoOrientation instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  AVCaptureVideoOrientation get orientation {
Pointer<Void> result = perform(SEL('orientation'), decodeRetVal: false);
    return AVCaptureVideoOrientation.fromPointer(result);

}
  @NativeDeprecated("Use AVCaptureConnection's videoOrientation instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  set orientation(AVCaptureVideoOrientation orientation) => perform(SEL('setOrientation:'), args: [orientation]);
  @NativeDeprecated("Use AVCaptureConnection's isVideoMirroringSupported instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  bool get mirroringSupported {
return perform(SEL('mirroringSupported'));

}
  @NativeDeprecated("Use AVCaptureConnection's isVideoMirroringSupported instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  set mirroringSupported(bool mirroringSupported) => perform(SEL('setMirroringSupported:'), args: [mirroringSupported]);
  @NativeDeprecated("Use AVCaptureConnection's automaticallyAdjustsVideoMirroring instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  bool get automaticallyAdjustsMirroring {
return perform(SEL('automaticallyAdjustsMirroring'));

}
  @NativeDeprecated("Use AVCaptureConnection's automaticallyAdjustsVideoMirroring instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  set automaticallyAdjustsMirroring(bool automaticallyAdjustsMirroring) => perform(SEL('setAutomaticallyAdjustsMirroring:'), args: [automaticallyAdjustsMirroring]);
  @NativeDeprecated("Use AVCaptureConnection's videoMirrored instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  bool get mirrored {
return perform(SEL('mirrored'));

}
  @NativeDeprecated("Use AVCaptureConnection's videoMirrored instead.", ios: ['4.0', '6.0']) @NativeUnavailable(macos)
  set mirrored(bool mirrored) => perform(SEL('setMirrored:'), args: [mirrored]);
  
  static AVCaptureVideoPreviewLayer layerWithSession(AVCaptureSession session) {
    Pointer<Void> result = Class('AVCaptureVideoPreviewLayer').perform(SEL('layerWithSession:'), args: [session], decodeRetVal: false);
    return AVCaptureVideoPreviewLayer.fromPointer(result);
  }
  AVCaptureVideoPreviewLayer.initWithSession(AVCaptureSession session)
     : super.fromPointer(_initWithSession(session));

  static Pointer<Void> _initWithSession(AVCaptureSession session) {
    Pointer<Void> target = alloc(Class('AVCaptureVideoPreviewLayer'));
    SEL sel = SEL('initWithSession:');
    return msgSend(target, sel, args: [session], decodeRetVal: false);
  }

  @NativeAvailable(ios: '8.0')
  static AVCaptureVideoPreviewLayer layerWithSessionWithNoConnection(AVCaptureSession session) {
    Pointer<Void> result = Class('AVCaptureVideoPreviewLayer').perform(SEL('layerWithSessionWithNoConnection:'), args: [session], decodeRetVal: false);
    return AVCaptureVideoPreviewLayer.fromPointer(result);
  }
  AVCaptureVideoPreviewLayer.initWithSessionWithNoConnection(AVCaptureSession session)
     : super.fromPointer(_initWithSessionWithNoConnection(session));

  static Pointer<Void> _initWithSessionWithNoConnection(AVCaptureSession session) {
    Pointer<Void> target = alloc(Class('AVCaptureVideoPreviewLayer'));
    SEL sel = SEL('initWithSessionWithNoConnection:');
    return msgSend(target, sel, args: [session], decodeRetVal: false);
  }

  @NativeAvailable(ios: '8.0')
  void setSessionWithNoConnection(AVCaptureSession session) {
     perform(SEL('setSessionWithNoConnection:'), args: [session]);
  }
  @NativeAvailable(macos: '10.15', ios: '6.0')
  CGPoint captureDevicePointOfInterestForPoint(CGPoint pointInLayer) {
    Pointer<Void> result = perform(SEL('captureDevicePointOfInterestForPoint:'), args: [pointInLayer], decodeRetVal: false);
    return CGPoint.fromPointer(result);
  }
  @NativeAvailable(macos: '10.15', ios: '6.0')
  CGPoint pointForCaptureDevicePointOfInterest(CGPoint captureDevicePointOfInterest) {
    Pointer<Void> result = perform(SEL('pointForCaptureDevicePointOfInterest:'), args: [captureDevicePointOfInterest], decodeRetVal: false);
    return CGPoint.fromPointer(result);
  }
  @NativeAvailable(macos: '10.15', ios: '7.0')
  CGRect metadataOutputRectOfInterestForRect(CGRect rectInLayerCoordinates) {
    Pointer<Void> result = perform(SEL('metadataOutputRectOfInterestForRect:'), args: [rectInLayerCoordinates], decodeRetVal: false);
    return CGRect.fromPointer(result);
  }
  @NativeAvailable(macos: '10.15', ios: '7.0')
  CGRect rectForMetadataOutputRectOfInterest(CGRect rectInMetadataOutputCoordinates) {
    Pointer<Void> result = perform(SEL('rectForMetadataOutputRectOfInterest:'), args: [rectInMetadataOutputCoordinates], decodeRetVal: false);
    return CGRect.fromPointer(result);
  }
  @NativeAvailable(macos: '10.15', ios: '6.0')
  AVMetadataObject transformedMetadataObjectForMetadataObject(AVMetadataObject metadataObject) {
    Pointer<Void> result = perform(SEL('transformedMetadataObjectForMetadataObject:'), args: [metadataObject], decodeRetVal: false);
    return AVMetadataObject.fromPointer(result);
  }

}
// You can uncomment this line when this package is ready.
// import 'package:avfcapture/avcapturevideopreviewlayer.dart';
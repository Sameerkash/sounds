// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avcaptureoutputbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avmediaformat.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmsamplebuffer.dart';

@NativeAvailable(macos: '10.7', ios: '4.0')
@native
class AVCaptureAudioDataOutput extends AVCaptureOutput {
  AVCaptureAudioDataOutput([Class isa]) : super(isa ?? Class('AVCaptureAudioDataOutput'));
  AVCaptureAudioDataOutput.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVCaptureAudioDataOutputSampleBufferDelegate get sampleBufferDelegate {
Pointer<Void> result = perform(SEL('sampleBufferDelegate'), decodeRetVal: false);
    return AVCaptureAudioDataOutputSampleBufferDelegate.fromPointer(result);

}
  
  set sampleBufferDelegate(AVCaptureAudioDataOutputSampleBufferDelegate sampleBufferDelegate) => perform(SEL('setSampleBufferDelegate:'), args: [sampleBufferDelegate]);
  
  dispatch_queue_t get sampleBufferCallbackQueue {
Pointer<Void> result = perform(SEL('sampleBufferCallbackQueue'), decodeRetVal: false);
    return dispatch_queue_t.fromPointer(result);

}
  
  set sampleBufferCallbackQueue(dispatch_queue_t sampleBufferCallbackQueue) => perform(SEL('setSampleBufferCallbackQueue:'), args: [sampleBufferCallbackQueue]);
  @NativeUnavailable(ios, watchos, tvos)
  id get audioSettings {
Pointer<Void> result = perform(SEL('audioSettings'), decodeRetVal: false);
    return id.fromPointer(result);

}
  @NativeUnavailable(ios, watchos, tvos)
  set audioSettings(id audioSettings) => perform(SEL('setAudioSettings:'), args: [audioSettings]);
  AVCaptureAudioDataOutput()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVCaptureAudioDataOutput'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }

  
  static AVCaptureAudioDataOutput new() {
    Pointer<Void> result = Class('AVCaptureAudioDataOutput').perform(SEL('new'), decodeRetVal: false);
    return AVCaptureAudioDataOutput.fromPointer(result);
  }
  
  void setSampleBufferDelegateQueue({AVCaptureAudioDataOutputSampleBufferDelegate sampleBufferDelegate, dispatch_queue_t sampleBufferCallbackQueue}) {
     perform(SEL('setSampleBufferDelegate:queue:'), args: [sampleBufferDelegate,sampleBufferCallbackQueue]);
  }
  @NativeAvailable(macos: '10.15', ios: '7.0')
  Map recommendedAudioSettingsForAssetWriterWithOutputFileType(AVFileType outputFileType) {
    Pointer<Void> result = perform(SEL('recommendedAudioSettingsForAssetWriterWithOutputFileType:'), args: [outputFileType], decodeRetVal: false);
    return NSDictionary.fromPointer(result).raw;
  }

}

@NativeAvailable(macos: '10.7', ios: '4.0')
abstract class AVCaptureAudioDataOutputSampleBufferDelegate {
  registerAVCaptureAudioDataOutputSampleBufferDelegate() {
    registerProtocolCallback(this, captureOutputDidOutputSampleBufferFromConnection, 'captureOutput:didOutputSampleBuffer:fromConnection:', AVCaptureAudioDataOutputSampleBufferDelegate);
  }
  
  void captureOutputDidOutputSampleBufferFromConnection(AVCaptureOutput output, CMSampleBufferRef sampleBuffer, AVCaptureConnection connection);
}
// You can uncomment this line when this package is ready.
// import 'package:avfcapture/avcaptureaudiodataoutput.dart';
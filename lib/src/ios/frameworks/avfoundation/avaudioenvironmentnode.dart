// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudionode.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudiounitreverb.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudiouniteq.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudiomixing.dart';

@NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
@native
class AVAudioEnvironmentDistanceAttenuationParameters extends NSObject {
  AVAudioEnvironmentDistanceAttenuationParameters([Class isa]) : super(isa ?? Class('AVAudioEnvironmentDistanceAttenuationParameters'));
  AVAudioEnvironmentDistanceAttenuationParameters.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVAudioEnvironmentDistanceAttenuationModel get distanceAttenuationModel {
Pointer<Void> result = perform(SEL('distanceAttenuationModel'), decodeRetVal: false);
    return AVAudioEnvironmentDistanceAttenuationModel.fromPointer(result);

}
  
  set distanceAttenuationModel(AVAudioEnvironmentDistanceAttenuationModel distanceAttenuationModel) => perform(SEL('setDistanceAttenuationModel:'), args: [distanceAttenuationModel]);
  
  double get referenceDistance {
return perform(SEL('referenceDistance'));

}
  
  set referenceDistance(double referenceDistance) => perform(SEL('setReferenceDistance:'), args: [referenceDistance]);
  
  double get maximumDistance {
return perform(SEL('maximumDistance'));

}
  
  set maximumDistance(double maximumDistance) => perform(SEL('setMaximumDistance:'), args: [maximumDistance]);
  
  double get rolloffFactor {
return perform(SEL('rolloffFactor'));

}
  
  set rolloffFactor(double rolloffFactor) => perform(SEL('setRolloffFactor:'), args: [rolloffFactor]);
  AVAudioEnvironmentDistanceAttenuationParameters()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVAudioEnvironmentDistanceAttenuationParameters'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }


}

@NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
@native
class AVAudioEnvironmentReverbParameters extends NSObject {
  AVAudioEnvironmentReverbParameters([Class isa]) : super(isa ?? Class('AVAudioEnvironmentReverbParameters'));
  AVAudioEnvironmentReverbParameters.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  bool get enable {
return perform(SEL('enable'));

}
  
  set enable(bool enable) => perform(SEL('setEnable:'), args: [enable]);
  
  double get level {
return perform(SEL('level'));

}
  
  set level(double level) => perform(SEL('setLevel:'), args: [level]);
  
  AVAudioUnitEQFilterParameters get filterParameters {
Pointer<Void> result = perform(SEL('filterParameters'), decodeRetVal: false);
    return AVAudioUnitEQFilterParameters.fromPointer(result);

}
  
  set filterParameters(AVAudioUnitEQFilterParameters filterParameters) => perform(SEL('setFilterParameters:'), args: [filterParameters]);
  AVAudioEnvironmentReverbParameters()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVAudioEnvironmentReverbParameters'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }

  
  void loadFactoryReverbPreset(AVAudioUnitReverbPreset preset) {
     perform(SEL('loadFactoryReverbPreset:'), args: [preset]);
  }

}


@NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0') @NativeUnavailable(watchos)
class AVAudioEnvironmentOutputType extends NSEnum {
  const AVAudioEnvironmentOutputType(dynamic raw) : super(raw);
  AVAudioEnvironmentOutputType.fromPointer(Pointer<Void> ptr) : super(ptr.address);
}


const AVAudioEnvironmentOutputType AVAudioEnvironmentOutputTypeAuto = AVAudioEnvironmentOutputType(0);

const AVAudioEnvironmentOutputType AVAudioEnvironmentOutputTypeHeadphones = AVAudioEnvironmentOutputType(1);

const AVAudioEnvironmentOutputType AVAudioEnvironmentOutputTypeBuiltInSpeakers = AVAudioEnvironmentOutputType(2);

const AVAudioEnvironmentOutputType AVAudioEnvironmentOutputTypeExternalSpeakers = AVAudioEnvironmentOutputType(3);


@NativeAvailable(macos: '10.10', ios: '8.0', tvos: '9.0') @NativeUnavailable(watchos)
@native
class AVAudioEnvironmentNode extends AVAudioNode with AVAudioMixing {
  AVAudioEnvironmentNode([Class isa]) : super(isa ?? Class('AVAudioEnvironmentNode'));
  AVAudioEnvironmentNode.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0') @NativeUnavailable(watchos)
  AVAudioEnvironmentOutputType get outputType {
Pointer<Void> result = perform(SEL('outputType'), decodeRetVal: false);
    return AVAudioEnvironmentOutputType.fromPointer(result);

}
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0') @NativeUnavailable(watchos)
  set outputType(AVAudioEnvironmentOutputType outputType) => perform(SEL('setOutputType:'), args: [outputType]);
  
  double get outputVolume {
return perform(SEL('outputVolume'));

}
  
  set outputVolume(double outputVolume) => perform(SEL('setOutputVolume:'), args: [outputVolume]);
  
  AVAudioNodeBus get nextAvailableInputBus {
Pointer<Void> result = perform(SEL('nextAvailableInputBus'), decodeRetVal: false);
    return AVAudioNodeBus.fromPointer(result);

}
  
  set nextAvailableInputBus(AVAudioNodeBus nextAvailableInputBus) => perform(SEL('setNextAvailableInputBus:'), args: [nextAvailableInputBus]);
  
  AVAudio3DPoint get listenerPosition {
Pointer<Void> result = perform(SEL('listenerPosition'), decodeRetVal: false);
    return AVAudio3DPoint.fromPointer(result);

}
  
  set listenerPosition(AVAudio3DPoint listenerPosition) => perform(SEL('setListenerPosition:'), args: [listenerPosition]);
  
  AVAudio3DVectorOrientation get listenerVectorOrientation {
Pointer<Void> result = perform(SEL('listenerVectorOrientation'), decodeRetVal: false);
    return AVAudio3DVectorOrientation.fromPointer(result);

}
  
  set listenerVectorOrientation(AVAudio3DVectorOrientation listenerVectorOrientation) => perform(SEL('setListenerVectorOrientation:'), args: [listenerVectorOrientation]);
  
  AVAudio3DAngularOrientation get listenerAngularOrientation {
Pointer<Void> result = perform(SEL('listenerAngularOrientation'), decodeRetVal: false);
    return AVAudio3DAngularOrientation.fromPointer(result);

}
  
  set listenerAngularOrientation(AVAudio3DAngularOrientation listenerAngularOrientation) => perform(SEL('setListenerAngularOrientation:'), args: [listenerAngularOrientation]);
  
  AVAudioEnvironmentDistanceAttenuationParameters get distanceAttenuationParameters {
Pointer<Void> result = perform(SEL('distanceAttenuationParameters'), decodeRetVal: false);
    return AVAudioEnvironmentDistanceAttenuationParameters.fromPointer(result);

}
  
  set distanceAttenuationParameters(AVAudioEnvironmentDistanceAttenuationParameters distanceAttenuationParameters) => perform(SEL('setDistanceAttenuationParameters:'), args: [distanceAttenuationParameters]);
  
  AVAudioEnvironmentReverbParameters get reverbParameters {
Pointer<Void> result = perform(SEL('reverbParameters'), decodeRetVal: false);
    return AVAudioEnvironmentReverbParameters.fromPointer(result);

}
  
  set reverbParameters(AVAudioEnvironmentReverbParameters reverbParameters) => perform(SEL('setReverbParameters:'), args: [reverbParameters]);
  
  NSNumber get applicableRenderingAlgorithms {
Pointer<Void> result = perform(SEL('applicableRenderingAlgorithms'), decodeRetVal: false);
    return NSNumber.fromPointer(result);

}
  
  set applicableRenderingAlgorithms(NSNumber applicableRenderingAlgorithms) => perform(SEL('setApplicableRenderingAlgorithms:'), args: [applicableRenderingAlgorithms]);
  AVAudioEnvironmentNode()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVAudioEnvironmentNode'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }


}
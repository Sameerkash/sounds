// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';

import 'hacks.dart';
// You can uncomment this line when this package is ready.
// import 'package:foundation/nsobject.dart';
// You can uncomment this line when this package is ready.
// import 'package:foundation/nsstring.dart';
// You can uncomment this line when this package is ready.
// import 'package:foundation/nscharacterset.dart';
// You can uncomment this line when this package is ready.
// import 'package:foundation/nsitemprovider.dart';

// typedef NSString * NSURLResourceKey NS_EXTENSIBLE_STRING_ENUM;
typedef NSURLResourceKey  = String Function(String);

@native
class NSURL extends NSObject with NSSecureCoding,NSCopying {
  NSURL([Class isa]) : super(isa ?? Class('NSURL'));
  NSURL.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  /// 
  NSData get dataRepresentation {
Pointer<Void> result = perform(SEL('dataRepresentation'), decodeRetVal: false);
    return NSData.fromPointer(result);

}
  /// 
  set dataRepresentation(NSData dataRepresentation) => perform(SEL('setDataRepresentation:'), args:  <dynamic>[dataRepresentation]);
  
  ///
  String get absoluteString {
Pointer<Void> result = perform(SEL('absoluteString'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  /// 
  set absoluteString(String absoluteString) 
  => perform(SEL('setAbsoluteString:'), args: <dynamic>[absoluteString]);
  
  ///
  String get relativeString {
var result = perform(SEL('relativeString'), decodeRetVal: false)
  as Pointer<Void> ;
    return NSString.fromPointer(result).raw;

}
  
  set relativeString(String relativeString) => perform(SEL('setRelativeString:'), args:  <dynamic>[relativeString]);
  
  /// 
  NSURL get baseURL {
var result = perform(SEL('baseURL'), decodeRetVal: false)
as Pointer<Void> ;
    return NSURL.fromPointer(result);

}
  
  ///
  set baseURL(NSURL baseURL) => perform(SEL('setBaseURL:'), args:  <dynamic>[baseURL]);
  
  ///
  NSURL get absoluteURL {
var result = perform(SEL('absoluteURL'), decodeRetVal: false)
as Pointer<Void> ;
    return NSURL.fromPointer(result);

}
  
  /// 
  set absoluteURL(NSURL absoluteURL) 
  => perform(SEL('setAbsoluteURL:'), args:  <dynamic>[absoluteURL]);
  
  String get scheme {
Pointer<Void> result = perform(SEL('scheme'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  /// 
  set scheme(String scheme) 
  => perform(SEL('setScheme:'), args:  <dynamic>[scheme]);
  
  ///
  String get resourceSpecifier {
var result = perform(SEL('resourceSpecifier'), decodeRetVal: false)
as Pointer<Void> ;
    return NSString.fromPointer(result).raw;

}
  
  set resourceSpecifier(String resourceSpecifier) => perform(SEL('setResourceSpecifier:'), args:  <dynamic>[resourceSpecifier]);
  
  ///
  String get host {
var result = perform(SEL('host'), decodeRetVal: false)
as Pointer<Void> ;
    return NSString.fromPointer(result).raw;

}
  
  set host(String host) => perform(SEL('setHost:'), args:  <dynamic>[host]);
  
  ///
  NSNumber get port {
var result = perform(SEL('port'), decodeRetVal: false)
as Pointer<Void> ;
    return NSNumber.fromPointer(result);

}
  
  set port(NSNumber port) => perform(SEL('setPort:'), args:  <dynamic>[port]);
  
  String get user {
Pointer<Void> result = perform(SEL('user'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set user(String user) => perform(SEL('setUser:'), args:  <dynamic>[user]);
  
  ///
  String get password {
var result = perform(SEL('password'), decodeRetVal: false)
as Pointer<Void> ;
    return NSString.fromPointer(result).raw;

}
///
  
  set password(String password) => perform(SEL('setPassword:'), args:  <dynamic>[password]);
  
  ///
  String get path {
var result = perform(SEL('path'), decodeRetVal: false)
as Pointer<Void> ;
    return NSString.fromPointer(result).raw;

}
  
  set path(String path) => perform(SEL('setPath:'), args:  <dynamic>[path]);
  
  ///
  String get fragment {
var result = perform(SEL('fragment'), decodeRetVal: false)
as Pointer<Void> ;
    return NSString.fromPointer(result).raw;

}
  
  ///
  set fragment(String fragment)
   => perform(SEL('setFragment:'), args:  <dynamic>[fragment]);

  
  String get query {
Pointer<Void> result = perform(SEL('query'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  ///
  set query(String query) => perform(SEL('setQuery:'), args:  <dynamic>[query]);
  
  ///
  String get relativePath {
var result = perform(SEL('relativePath'), decodeRetVal: false)
as Pointer<Void> ;
    return NSString.fromPointer(result).raw;

}
  
  ///
  set relativePath(String relativePath)
  => perform(SEL('setRelativePath:'), args:  <dynamic>[relativePath]);
  ///
  bool get hasDirectoryPath {
return perform(SEL('hasDirectoryPath')) as bool;

}
///
  set hasDirectoryPath(bool hasDirectoryPath) 
  => perform(SEL('setHasDirectoryPath:'), args:  <dynamic>[hasDirectoryPath]);

  ///
  String get fileSystemRepresentation {
return perform(SEL('fileSystemRepresentation')) as String;

}
  set fileSystemRepresentation(String fileSystemRepresentation) 
  => perform(SEL('setFileSystemRepresentation:')
  , args:  <dynamic>[fileSystemRepresentation]);
  
  bool get fileURL {
return perform(SEL('fileURL')) as bool;

}
  
  ///
  set fileURL(bool fileURL) => perform(SEL('setFileURL:'), args:  <dynamic>[fileURL]);
  
  ///
  NSURL get standardizedURL {
var result = perform(SEL('standardizedURL'), decodeRetVal: false)
as Pointer<Void> ;
    return NSURL.fromPointer(result);

}
  
  set standardizedURL(NSURL standardizedURL) => perform(SEL('setStandardizedURL:'), args:  <dynamic>[standardizedURL]);
  ///
  NSURL get filePathURL {
var result = perform(SEL('filePathURL'), decodeRetVal: false)
as Pointer<Void> ;
    return NSURL.fromPointer(result);


}
///
  set filePathURL(NSURL filePathURL) 
  => perform(SEL('setFilePathURL:'), args:  <dynamic>[filePathURL]);
  ///
  NSURL.initWithSchemeHostPath(String scheme, String path, {String host})
     : super.fromPointer(_initWithSchemeHostPath(scheme,path, host: host));

///
  static Pointer<Void> _initWithSchemeHostPath(String scheme, String path
  , {String host}) {
    var target = alloc(Class('NSURL')) ;
   var sel = SEL('initWithScheme:host:path:');

    return msgSend(target, sel
    , args:  <dynamic>[scheme,host,path], decodeRetVal: false)  
    as  Pointer<Void>;
  }

///
  NSURL.initFileURLWithPathIsDirectoryRelativeToURL(String path
  , {bool isDir, NSURL baseURL})
     : super.fromPointer(
       _initFileURLWithPathIsDirectoryRelativeToURL(path,isDir
       ,baseURL: baseURL));

  static Pointer<Void> _initFileURLWithPathIsDirectoryRelativeToURL(String path
  , bool isDir, {NSURL baseURL}) {
    var target = alloc(Class('NSURL')) ;
    var sel = SEL('initFileURLWithPath:isDirectory:relativeToURL:');
    return msgSend(target, sel,
     args:  <dynamic>[path,isDir,baseURL]
     , decodeRetVal: false) as Pointer<Void> ;
  }

///
  NSURL.initFileURLWithPathRelativeToURL(String path, {NSURL baseURL})
     : super.fromPointer(
       _initFileURLWithPathRelativeToURL(path,baseURL: baseURL));

/// 
  static Pointer<Void> _initFileURLWithPathRelativeToURL(String path
  , {NSURL baseURL}) {
    var target = alloc(Class('NSURL')) ;
    var sel = SEL('initFileURLWithPath:relativeToURL:');
    return msgSend(target, sel
    , args:  <dynamic>[path,baseURL], decodeRetVal: false) as Pointer<Void> ;
  }

///
  NSURL.initFileURLWithPathIsDirectory(String path, {bool isDir})
     : super.fromPointer(_initFileURLWithPathIsDirectory(path,isDir));

  static Pointer<Void> _initFileURLWithPathIsDirectory(String path
  , bool isDir) {
    var target = alloc(Class('NSURL'));
   var sel = SEL('initFileURLWithPath:isDirectory:');
    return msgSend(target, sel
    , args:  <dynamic>[path,isDir], decodeRetVal: false)  as  Pointer<Void>;
  }

///
  NSURL.initFileURLWithPath(String path)
     : super.fromPointer(_initFileURLWithPath(path));


  static Pointer<Void> _initFileURLWithPath(String path) {
    var target = alloc(Class('NSURL'));
   var sel = SEL('initFileURLWithPath:');
    return msgSend(target, sel, args:  <dynamic>[path], decodeRetVal: false)
     as Pointer<Void> ;
  }

  /// 
  static NSURL fileURLWithPathIsDirectoryRelativeToURL(String path
  , {bool isDir, NSURL baseURL}) {
    var result = Class('NSURL')
    .perform(SEL('fileURLWithPath:isDirectory:relativeToURL:')
    , args:  <dynamic>[path,isDir,baseURL], decodeRetVal: false)
     as  Pointer<Void>;
    return NSURL.fromPointer(result);
  }
  ///
  static NSURL fileURLWithPathRelativeToURL(String path, {NSURL baseURL}) {
    var result = Class('NSURL')
    .perform(SEL('fileURLWithPath:relativeToURL:')
    , args:  <dynamic>[path,baseURL], decodeRetVal: false)as Pointer<Void> ;
    return NSURL.fromPointer(result);
  }
  ///
  static NSURL fileURLWithPathIsDirectory(String path, {bool isDir}) {

    var result = Class('NSURL')
    .perform(SEL('fileURLWithPath:isDirectory:')
    , args:  <dynamic>[path,isDir], decodeRetVal: false) as  Pointer<Void> ;
    return NSURL.fromPointer(result);
  }
  
  ///
  static NSURL fileURLWithPath(String path) {
    var result = Class('NSURL').perform(SEL('fileURLWithPath:')
    , args:  <dynamic>[path], decodeRetVal: false) as  Pointer<Void>;
    return NSURL.fromPointer(result);
  }
  /// 
  NSURL.initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(
    String path, {bool isDir, NSURL baseURL})
     : super.fromPointer(
       _initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(
         path,isDir, baseURL: baseURL));

///
  static Pointer<Void> 
  _initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(
    String path, bool isDir, {NSURL baseURL}) {
    var target = alloc(Class('NSURL'));

   var sel 
   = SEL('initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:');
    return msgSend(target, sel
    , args:  <dynamic>[path,isDir,baseURL], decodeRetVal: false)  
    as  Pointer<Void>;
  }

/// 
  static NSURL fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(
    String path, {bool isDir, NSURL baseURL}) {
    var result = Class('NSURL')
    .perform(
      SEL('fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:')
    , args:  <dynamic>[path,isDir,baseURL], decodeRetVal: false)  
    as  Pointer<Void>;
    return NSURL.fromPointer(result);
  }
  ///
  NSURL.initWithString(String urlString)
     : super.fromPointer(_initWithString(urlString));

  static Pointer<Void> _initWithString(String urlString) {
    var target = alloc(Class('NSURL'));
   var sel = SEL('initWithString:');
    return msgSend(target, sel
    , args:  <dynamic>[urlString], decodeRetVal: false) as  Pointer<Void>;
  }

/// 
  NSURL.initWithStringRelativeToURL(String urlString, {NSURL baseURL})
     : super.fromPointer(_initWithStringRelativeToURL(urlString
     ,baseURL: baseURL));

///
  static Pointer<Void> _initWithStringRelativeToURL(String URLString
  , {NSURL baseURL}) {
    var target = alloc(Class('NSURL'));
   var sel = SEL('initWithString:relativeToURL:');
    return msgSend(target, sel
    , args:  <dynamic>[URLString,baseURL], decodeRetVal: false)  
    as  Pointer<Void>;
  }

  
  /// 
  static NSURL urlWithString(String urlString) {
    var result = Class('NSURL').perform(SEL('URLWithString:')
    , args:  <dynamic>[urlString], decodeRetVal: false) as  Pointer<Void>;
    return NSURL.fromPointer(result);
  }
  
  ///
  static NSURL urlWithStringRelativeToURL(String urlString, {NSURL baseURL}) {
    var result = Class('NSURL')
    .perform(SEL('URLWithString:relativeToURL:')
    , args:  <dynamic>[urlString,baseURL], decodeRetVal: false)
     as Pointer<Void>;
    return NSURL.fromPointer(result);
  }
  /// 
  NSURL.initWithDataRepresentationRelativeToURL(NSData data, {NSURL baseURL})
     : super.fromPointer(_initWithDataRepresentationRelativeToURL(data,
     baseURL: baseURL));

/// 
  static Pointer<Void> _initWithDataRepresentationRelativeToURL(NSData data
  , {NSURL baseURL}) {
    var target = alloc(Class('NSURL'));
   var sel = SEL('initWithDataRepresentation:relativeToURL:');
    return msgSend(target, sel
    , args:  <dynamic>[data,baseURL], decodeRetVal: false) as Pointer<Void>;
  }

  static NSURL URLWithDataRepresentationRelativeToURL(NSData data
  , {NSURL baseURL}) {
    var result = Class('NSURL')
    .perform(SEL('URLWithDataRepresentation:relativeToURL:')
    , args:  <dynamic>[data,baseURL], decodeRetVal: false)
    as Pointer<Void>;
    return NSURL.fromPointer(result);
  }
  /// 
  NSURL.initAbsoluteURLWithDataRepresentationRelativeToURL(NSData data
  , {NSURL baseURL})
     : super.fromPointer(
       _initAbsoluteURLWithDataRepresentationRelativeToURL(data
       ,baseURL: baseURL));

  static Pointer<Void> _initAbsoluteURLWithDataRepresentationRelativeToURL(
    NSData data, {NSURL baseURL}) {
    var target = alloc(Class('NSURL'));
   var sel = SEL('initAbsoluteURLWithDataRepresentation:relativeToURL:');
    return msgSend(target, sel
    , args:  <dynamic>[data,baseURL], decodeRetVal: false) as Pointer<Void>;
  }

  /// 
  static NSURL absoluteURLWithDataRepresentationRelativeToURL(NSData data
  , {NSURL baseURL}) {
    var result = Class('NSURL')
        .perform(SEL('absoluteURLWithDataRepresentation:relativeToURL:')
    , args:  <dynamic>[data,baseURL], decodeRetVal: false)
    as Pointer<Void>;
    return NSURL.fromPointer(result);
  }
  /// 
  bool getFileSystemRepresentationMaxLength(String buffer
  , NSUInteger maxBufferLength) {
    return perform(SEL('getFileSystemRepresentation:maxLength:')
    , args:  <dynamic>[buffer,maxBufferLength]) as bool;
  }

/// 
  bool checkResourceIsReachableAndReturnError(NSObjectRef<NSError> error) {
    return perform(SEL('checkResourceIsReachableAndReturnError:')
    , args:  <dynamic>[error]) as bool;
  }
  /// 
  bool isFileReferenceURL() {
    return perform(SEL('isFileReferenceURL')) as bool;
  }
  ///
  NSURL.fileReferenceURL()
     : super.fromPointer(_fileReferenceURL());

  static Pointer<Void> _fileReferenceURL() {
    var target = alloc(Class('NSURL'));
   var sel = SEL('fileReferenceURL');
    return msgSend(target, sel, args:  <dynamic>[], decodeRetVal: false)
    as Pointer<Void>;
  }

  bool getResourceValueForKeyError(NSURLResourceKey key
  , {NSObject value, NSObjectRef<NSError> error}) {
    return perform(SEL('getResourceValue:forKey:error:')
    , args:  <dynamic>[value,key,error]) as bool;
  }
  /// 
  NSObject resourceValuesForKeysError(NSURLResourceKey keys
  , NSObjectRef<NSError> error) {
    var result = perform(SEL('resourceValuesForKeys:error:')
    , args:  <dynamic>[keys,error], decodeRetVal: false)
    as Pointer<Void>;
    return NSObject.fromPointer(result);
  }
  ///
  bool setResourceValueForKeyError(NSURLResourceKey key
  , NSObjectRef<NSError> error, {NSObject value}) {
    return perform(SEL('setResourceValue:forKey:error:')
    , args:  <dynamic>[value,key,error]) as bool;
  }
  bool setResourceValuesError(NSObject keyedValues
  , NSObjectRef<NSError> error) {
    return perform(SEL('setResourceValues:error:')
    , args:  <dynamic>[keyedValues,error]) as bool;
  }
  /// 
  void removeCachedResourceValueForKey(NSURLResourceKey key) {
     perform(SEL('removeCachedResourceValueForKey:'), args:  <dynamic>[key]);
  }

  /// 
  void removeAllCachedResourceValues() {
     perform(SEL('removeAllCachedResourceValues'));
  }
  /// 
  void setTemporaryResourceValueForKey(NSURLResourceKey key, {NSObject value}) {
     perform(SEL('setTemporaryResourceValue:forKey:')
     , args:  <dynamic>[value,key]);
  }
  ///
  bool startAccessingSecurityScopedResource() {
    return perform(SEL('startAccessingSecurityScopedResource'))
    as bool;
  }
  ///
  void stopAccessingSecurityScopedResource() {
     perform(SEL('stopAccessingSecurityScopedResource'));
  }

}

///
extension NSURLNSPromisedItems on NSURL {
  ///
  bool getPromisedItemResourceValueForKeyError(NSURLResourceKey key
  , NSObjectRef<NSError> error, {NSObject value}) {
    return perform(SEL('getPromisedItemResourceValue:forKey:error:')
    , args:  <dynamic>[value,key,error]) as bool;
  }
  NSObject promisedItemResourceValuesForKeysError(NSURLResourceKey keys
  , NSObjectRef<NSError> error) {
    var result 
    = perform(SEL('promisedItemResourceValuesForKeys:error:')
    , args:  <dynamic>[keys,error], decodeRetVal: false) as Pointer<Void>;
    return NSObject.fromPointer(result);
  }
  /// 
  bool checkPromisedItemIsReachableAndReturnError(NSObjectRef<NSError> error) {
    return perform(SEL('checkPromisedItemIsReachableAndReturnError:')
    , args:  <dynamic>[error]) as bool;
  }

}



@native
/// 
class NSURLQueryItem extends NSObject with NSSecureCoding,NSCopying {
  ///
  NSURLQueryItem([Class isa]) : super(isa ?? Class('NSURLQueryItem'));
  ///
  NSURLQueryItem.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  ///
  String get name {
var result = perform(SEL('name'), decodeRetVal: false)
as Pointer<Void>;
    return NSString.fromPointer(result).raw;

}
  
  set name(String name) => perform(SEL('setName:'), args:  <dynamic>[name]);
  
  String get value {
Pointer<Void> result = perform(SEL('value'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  ///
  set value(String value) => perform(SEL('setValue:'), args:  <dynamic>[value]);

  
  NSURLQueryItem(String name, {String value})
     : super.fromPointer(_initWithNameValue(name,value));

  static Pointer<Void> _initWithNameValue(String name, {String value}) {
    var target = alloc(Class('NSURLQueryItem'));
   var sel = SEL('initWithName:value:');
    return msgSend(target, sel, args:  <dynamic>[name,value], decodeRetVal: false);
  }

  
  static NSURLQueryItem queryItemWithNameValue(String name, {String value}) {
    Pointer<Void> result = Class('NSURLQueryItem').perform(SEL('queryItemWithName:value:'), args:  <dynamic>[name,value], decodeRetVal: false);
    return NSURLQueryItem.fromPointer(result);
  }

}

@NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
@native
class NSURLComponents extends NSObject with NSCopying {
  NSURLComponents([Class isa]) : super(isa ?? Class('NSURLComponents'));
  NSURLComponents.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  NSURL get URL {
Pointer<Void> result = perform(SEL('URL'), decodeRetVal: false);
    return NSURL.fromPointer(result);

}
  
  set URL(NSURL URL) => perform(SEL('setURL:'), args:  <dynamic>[URL]);
  @NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
  String get string {
Pointer<Void> result = perform(SEL('string'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  @NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
  set string(String string) => perform(SEL('setString:'), args:  <dynamic>[string]);
  
  String get scheme {
Pointer<Void> result = perform(SEL('scheme'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set scheme(String scheme) => perform(SEL('setScheme:'), args:  <dynamic>[scheme]);
  
  String get user {
Pointer<Void> result = perform(SEL('user'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set user(String user) => perform(SEL('setUser:'), args:  <dynamic>[user]);
  
  String get password {
Pointer<Void> result = perform(SEL('password'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set password(String password) => perform(SEL('setPassword:'), args:  <dynamic>[password]);
  
  String get host {
Pointer<Void> result = perform(SEL('host'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set host(String host) => perform(SEL('setHost:'), args:  <dynamic>[host]);
  
  NSNumber get port {
Pointer<Void> result = perform(SEL('port'), decodeRetVal: false);
    return NSNumber.fromPointer(result);

}
  
  set port(NSNumber port) => perform(SEL('setPort:'), args:  <dynamic>[port]);
  
  String get path {
Pointer<Void> result = perform(SEL('path'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set path(String path) => perform(SEL('setPath:'), args:  <dynamic>[path]);
  
  String get query {
Pointer<Void> result = perform(SEL('query'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set query(String query) => perform(SEL('setQuery:'), args:  <dynamic>[query]);
  
  String get fragment {
Pointer<Void> result = perform(SEL('fragment'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set fragment(String fragment) => perform(SEL('setFragment:'), args:  <dynamic>[fragment]);
  
  String get percentEncodedUser {
Pointer<Void> result = perform(SEL('percentEncodedUser'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set percentEncodedUser(String percentEncodedUser) => perform(SEL('setPercentEncodedUser:'), args:  <dynamic>[percentEncodedUser]);
  
  String get percentEncodedPassword {
Pointer<Void> result = perform(SEL('percentEncodedPassword'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set percentEncodedPassword(String percentEncodedPassword) => perform(SEL('setPercentEncodedPassword:'), args:  <dynamic>[percentEncodedPassword]);
  
  String get percentEncodedHost {
Pointer<Void> result = perform(SEL('percentEncodedHost'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set percentEncodedHost(String percentEncodedHost) => perform(SEL('setPercentEncodedHost:'), args:  <dynamic>[percentEncodedHost]);
  
  String get percentEncodedPath {
Pointer<Void> result = perform(SEL('percentEncodedPath'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set percentEncodedPath(String percentEncodedPath) => perform(SEL('setPercentEncodedPath:'), args:  <dynamic>[percentEncodedPath]);
  
  String get percentEncodedQuery {
Pointer<Void> result = perform(SEL('percentEncodedQuery'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set percentEncodedQuery(String percentEncodedQuery) => perform(SEL('setPercentEncodedQuery:'), args:  <dynamic>[percentEncodedQuery]);
  
  String get percentEncodedFragment {
Pointer<Void> result = perform(SEL('percentEncodedFragment'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set percentEncodedFragment(String percentEncodedFragment) => perform(SEL('setPercentEncodedFragment:'), args:  <dynamic>[percentEncodedFragment]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfScheme {
Pointer<Void> result = perform(SEL('rangeOfScheme'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfScheme(NSRange rangeOfScheme) => perform(SEL('setRangeOfScheme:'), args:  <dynamic>[rangeOfScheme]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfUser {
Pointer<Void> result = perform(SEL('rangeOfUser'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfUser(NSRange rangeOfUser) => perform(SEL('setRangeOfUser:'), args:  <dynamic>[rangeOfUser]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfPassword {
Pointer<Void> result = perform(SEL('rangeOfPassword'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfPassword(NSRange rangeOfPassword) => perform(SEL('setRangeOfPassword:'), args:  <dynamic>[rangeOfPassword]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfHost {
Pointer<Void> result = perform(SEL('rangeOfHost'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfHost(NSRange rangeOfHost) => perform(SEL('setRangeOfHost:'), args:  <dynamic>[rangeOfHost]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfPort {
Pointer<Void> result = perform(SEL('rangeOfPort'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfPort(NSRange rangeOfPort) => perform(SEL('setRangeOfPort:'), args:  <dynamic>[rangeOfPort]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfPath {
Pointer<Void> result = perform(SEL('rangeOfPath'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfPath(NSRange rangeOfPath) => perform(SEL('setRangeOfPath:'), args:  <dynamic>[rangeOfPath]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfQuery {
Pointer<Void> result = perform(SEL('rangeOfQuery'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfQuery(NSRange rangeOfQuery) => perform(SEL('setRangeOfQuery:'), args:  <dynamic>[rangeOfQuery]);
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  NSRange get rangeOfFragment {
Pointer<Void> result = perform(SEL('rangeOfFragment'), decodeRetVal: false);
    return NSRange.fromPointer(result);

}
  @NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
  set rangeOfFragment(NSRange rangeOfFragment) => perform(SEL('setRangeOfFragment:'), args:  <dynamic>[rangeOfFragment]);
  @NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
  NSURLQueryItem get queryItems {
Pointer<Void> result = perform(SEL('queryItems'), decodeRetVal: false);
    return NSURLQueryItem.fromPointer(result);

}
  @NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
  set queryItems(NSURLQueryItem queryItems) => perform(SEL('setQueryItems:'), args:  <dynamic>[queryItems]);
  @NativeAvailable(macosx: '10.13', ios: '11.0', watchos: '4.0', tvos: '11.0')
  NSURLQueryItem get percentEncodedQueryItems {
Pointer<Void> result = perform(SEL('percentEncodedQueryItems'), decodeRetVal: false);
    return NSURLQueryItem.fromPointer(result);

}
  @NativeAvailable(macosx: '10.13', ios: '11.0', watchos: '4.0', tvos: '11.0')
  set percentEncodedQueryItems(NSURLQueryItem percentEncodedQueryItems) => perform(SEL('setPercentEncodedQueryItems:'), args:  <dynamic>[percentEncodedQueryItems]);
  NSURLComponents.init()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    var target = alloc(Class('NSURLComponents'));
   var sel = SEL('init');
    return msgSend(target, sel, args:  <dynamic>[], decodeRetVal: false);
  }

  NSURLComponents.initWithURLResolvingAgainstBaseURL(NSURL url, bool resolve)
     : super.fromPointer(_initWithURLResolvingAgainstBaseURL(url,resolve));

  static Pointer<Void> _initWithURLResolvingAgainstBaseURL(NSURL url, bool resolve) {
    var target = alloc(Class('NSURLComponents'));
   var sel = SEL('initWithURL:resolvingAgainstBaseURL:');
    return msgSend(target, sel, args:  <dynamic>[url,resolve], decodeRetVal: false);
  }

  
  static NSURLComponents componentsWithURLResolvingAgainstBaseURL(NSURL url, bool resolve) {
    Pointer<Void> result = Class('NSURLComponents').perform(SEL('componentsWithURL:resolvingAgainstBaseURL:'), args:  <dynamic>[url,resolve], decodeRetVal: false);
    return NSURLComponents.fromPointer(result);
  }
  NSURLComponents.initWithString(String URLString)
     : super.fromPointer(_initWithString(URLString));

  static Pointer<Void> _initWithString(String URLString) {
    var target = alloc(Class('NSURLComponents'));
   var sel = SEL('initWithString:');
    return msgSend(target, sel, args:  <dynamic>[URLString], decodeRetVal: false);
  }

  
  static NSURLComponents componentsWithString(String URLString) {
    Pointer<Void> result = Class('NSURLComponents').perform(SEL('componentsWithString:'), args:  <dynamic>[URLString], decodeRetVal: false);
    return NSURLComponents.fromPointer(result);
  }
  
  NSURL URLRelativeToURL({NSURL baseURL}) {
    Pointer<Void> result = perform(SEL('URLRelativeToURL:'), args:  <dynamic>[baseURL], decodeRetVal: false);
    return NSURL.fromPointer(result);
  }

}

extension NSCharacterSetNSURLUtilities on NSCharacterSet {
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  NSCharacterSet get URLUserAllowedCharacterSet {
Pointer<Void> result = Class('NSURLUtilities').perform(SEL('URLUserAllowedCharacterSet'), decodeRetVal: false);
    return NSCharacterSet.fromPointer(result);

}
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  set URLUserAllowedCharacterSet(NSCharacterSet URLUserAllowedCharacterSet) => Class('NSURLUtilities').perform(SEL('setURLUserAllowedCharacterSet:'), args:  <dynamic>[URLUserAllowedCharacterSet]);
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  NSCharacterSet get URLPasswordAllowedCharacterSet {
Pointer<Void> result = Class('NSURLUtilities').perform(SEL('URLPasswordAllowedCharacterSet'), decodeRetVal: false);
    return NSCharacterSet.fromPointer(result);

}
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  set URLPasswordAllowedCharacterSet(NSCharacterSet URLPasswordAllowedCharacterSet) => Class('NSURLUtilities').perform(SEL('setURLPasswordAllowedCharacterSet:'), args:  <dynamic>[URLPasswordAllowedCharacterSet]);
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  NSCharacterSet get URLHostAllowedCharacterSet {
Pointer<Void> result = Class('NSURLUtilities').perform(SEL('URLHostAllowedCharacterSet'), decodeRetVal: false);
    return NSCharacterSet.fromPointer(result);

}
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  set URLHostAllowedCharacterSet(NSCharacterSet URLHostAllowedCharacterSet) => Class('NSURLUtilities').perform(SEL('setURLHostAllowedCharacterSet:'), args:  <dynamic>[URLHostAllowedCharacterSet]);
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  NSCharacterSet get URLPathAllowedCharacterSet {
Pointer<Void> result = Class('NSURLUtilities').perform(SEL('URLPathAllowedCharacterSet'), decodeRetVal: false);
    return NSCharacterSet.fromPointer(result);

}
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  set URLPathAllowedCharacterSet(NSCharacterSet URLPathAllowedCharacterSet) => Class('NSURLUtilities').perform(SEL('setURLPathAllowedCharacterSet:'), args:  <dynamic>[URLPathAllowedCharacterSet]);
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  NSCharacterSet get URLQueryAllowedCharacterSet {
Pointer<Void> result = Class('NSURLUtilities').perform(SEL('URLQueryAllowedCharacterSet'), decodeRetVal: false);
    return NSCharacterSet.fromPointer(result);

}
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  set URLQueryAllowedCharacterSet(NSCharacterSet URLQueryAllowedCharacterSet) => Class('NSURLUtilities').perform(SEL('setURLQueryAllowedCharacterSet:'), args:  <dynamic>[URLQueryAllowedCharacterSet]);
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  NSCharacterSet get URLFragmentAllowedCharacterSet {
Pointer<Void> result = Class('NSURLUtilities').perform(SEL('URLFragmentAllowedCharacterSet'), decodeRetVal: false);
    return NSCharacterSet.fromPointer(result);

}
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  set URLFragmentAllowedCharacterSet(NSCharacterSet URLFragmentAllowedCharacterSet) => Class('NSURLUtilities').perform(SEL('setURLFragmentAllowedCharacterSet:'), args:  <dynamic>[URLFragmentAllowedCharacterSet]);

}

extension NSStringNSURLUtilities on NSString {
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  String get stringByRemovingPercentEncoding {
Pointer<Void> result = perform(SEL('stringByRemovingPercentEncoding'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  set stringByRemovingPercentEncoding(String stringByRemovingPercentEncoding) => perform(SEL('setStringByRemovingPercentEncoding:'), args:  <dynamic>[stringByRemovingPercentEncoding]);
  @NativeAvailable(macos: '10.9', ios: '7.0', watchos: '2.0', tvos: '9.0')
  String stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet allowedCharacters) {
    Pointer<Void> result = perform(SEL('stringByAddingPercentEncodingWithAllowedCharacters:'), args:  <dynamic>[allowedCharacters], decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }
  @NativeDeprecated("Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.", macos: ['10.0', '10.11'], ios: ['2.0', '9.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  String stringByAddingPercentEscapesUsingEncoding(NSStringEncoding enc) {
    Pointer<Void> result = perform(SEL('stringByAddingPercentEscapesUsingEncoding:'), args:  <dynamic>[enc], decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }
  @NativeDeprecated("Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.", macos: ['10.0', '10.11'], ios: ['2.0', '9.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  String stringByReplacingPercentEscapesUsingEncoding(NSStringEncoding enc) {
    Pointer<Void> result = perform(SEL('stringByReplacingPercentEscapesUsingEncoding:'), args:  <dynamic>[enc], decodeRetVal: false);
    return NSString.fromPointer(result).raw;
  }

}

extension NSURLNSURLPathUtilities on NSURL {
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  NSString get pathComponents {
Pointer<Void> result = perform(SEL('pathComponents'), decodeRetVal: false);
    return NSString.fromPointer(result);

}
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  set pathComponents(NSString pathComponents) => perform(SEL('setPathComponents:'), args:  <dynamic>[pathComponents]);
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  String get lastPathComponent {
Pointer<Void> result = perform(SEL('lastPathComponent'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  set lastPathComponent(String lastPathComponent) => perform(SEL('setLastPathComponent:'), args:  <dynamic>[lastPathComponent]);
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  String get pathExtension {
Pointer<Void> result = perform(SEL('pathExtension'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  set pathExtension(String pathExtension) => perform(SEL('setPathExtension:'), args:  <dynamic>[pathExtension]);
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  NSURL get URLByDeletingLastPathComponent {
Pointer<Void> result = perform(SEL('URLByDeletingLastPathComponent'), decodeRetVal: false);
    return NSURL.fromPointer(result);

}
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  set URLByDeletingLastPathComponent(NSURL URLByDeletingLastPathComponent) => perform(SEL('setURLByDeletingLastPathComponent:'), args:  <dynamic>[URLByDeletingLastPathComponent]);
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  NSURL get URLByDeletingPathExtension {
Pointer<Void> result = perform(SEL('URLByDeletingPathExtension'), decodeRetVal: false);
    return NSURL.fromPointer(result);

}
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  set URLByDeletingPathExtension(NSURL URLByDeletingPathExtension) => perform(SEL('setURLByDeletingPathExtension:'), args:  <dynamic>[URLByDeletingPathExtension]);
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  NSURL get URLByStandardizingPath {
Pointer<Void> result = perform(SEL('URLByStandardizingPath'), decodeRetVal: false);
    return NSURL.fromPointer(result);

}
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  set URLByStandardizingPath(NSURL URLByStandardizingPath) => perform(SEL('setURLByStandardizingPath:'), args:  <dynamic>[URLByStandardizingPath]);
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  NSURL get URLByResolvingSymlinksInPath {
Pointer<Void> result = perform(SEL('URLByResolvingSymlinksInPath'), decodeRetVal: false);
    return NSURL.fromPointer(result);

}
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  set URLByResolvingSymlinksInPath(NSURL URLByResolvingSymlinksInPath) => perform(SEL('setURLByResolvingSymlinksInPath:'), args:  <dynamic>[URLByResolvingSymlinksInPath]);
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  static NSURL fileURLWithPathComponents(String components) {
    Pointer<Void> result = Class('NSURLPathUtilities').perform(SEL('fileURLWithPathComponents:'), args:  <dynamic>[components], decodeRetVal: false);
    return NSURL.fromPointer(result);
  }
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  NSURL URLByAppendingPathComponent(String pathComponent) {
    Pointer<Void> result = perform(SEL('URLByAppendingPathComponent:'), args:  <dynamic>[pathComponent], decodeRetVal: false);
    return NSURL.fromPointer(result);
  }
  @NativeAvailable(macos: '10.7', ios: '5.0', watchos: '2.0', tvos: '9.0')
  NSURL URLByAppendingPathComponentIsDirectory(String pathComponent, bool isDirectory) {
    Pointer<Void> result = perform(SEL('URLByAppendingPathComponent:isDirectory:'), args:  <dynamic>[pathComponent,isDirectory], decodeRetVal: false);
    return NSURL.fromPointer(result);
  }
  @NativeAvailable(macos: '10.6', ios: '4.0', watchos: '2.0', tvos: '9.0')
  NSURL URLByAppendingPathExtension(String pathExtension) {
    Pointer<Void> result = perform(SEL('URLByAppendingPathExtension:'), args:  <dynamic>[pathExtension], decodeRetVal: false);
    return NSURL.fromPointer(result);
  }

}

@NativeAvailable(macos: '10.7', ios: '5.0', watchos: '2.0', tvos: '9.0')
@native
class NSFileSecurity extends NSObject with NSCopying,NSSecureCoding {
  NSFileSecurity([Class isa]) : super(isa ?? Class('NSFileSecurity'));
  NSFileSecurity.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  NSFileSecurity(NSCoder coder)
     : super.fromPointer(_initWithCoder(coder));

  static Pointer<Void> _initWithCoder(NSCoder coder) {
    var target = alloc(Class('NSFileSecurity'));
   var sel = SEL('initWithCoder:');
    return msgSend(target, sel, args:  <dynamic>[coder], decodeRetVal: false);
  }


}

extension NSObjectNSURLClient on NSObject {
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  void URLResourceDataDidBecomeAvailable(NSURL sender, NSData newBytes) {
     perform(SEL('URL:resourceDataDidBecomeAvailable:'), args:  <dynamic>[sender,newBytes]);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  void URLResourceDidFinishLoading(NSURL sender) {
     perform(SEL('URLResourceDidFinishLoading:'), args:  <dynamic>[sender]);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  void URLResourceDidCancelLoading(NSURL sender) {
     perform(SEL('URLResourceDidCancelLoading:'), args:  <dynamic>[sender]);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  void URLResourceDidFailLoadingWithReason(NSURL sender, String reason) {
     perform(SEL('URL:resourceDidFailLoadingWithReason:'), args:  <dynamic>[sender,reason]);
  }

}

extension NSURLNSURLLoading on NSURL {
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  NSData resourceDataUsingCache(bool shouldUseCache) {
    Pointer<Void> result = perform(SEL('resourceDataUsingCache:'), args:  <dynamic>[shouldUseCache], decodeRetVal: false);
    return NSData.fromPointer(result);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  void loadResourceDataNotifyingClientUsingCache(NSObject client, bool shouldUseCache) {
     perform(SEL('loadResourceDataNotifyingClient:usingCache:'), args:  <dynamic>[client,shouldUseCache]);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  NSObject propertyForKey(String propertyKey) {
    Pointer<Void> result = perform(SEL('propertyForKey:'), args:  <dynamic>[propertyKey], decodeRetVal: false);
    return NSObject.fromPointer(result);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  bool setResourceData(NSData data) {
    return perform(SEL('setResourceData:'), args:  <dynamic>[data]);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  bool setPropertyForKey(NSObject property, String propertyKey) {
    return perform(SEL('setProperty:forKey:'), args:  <dynamic>[property,propertyKey]);
  }
  @NativeDeprecated("Use NSURLConnection instead", macos: ['10.0', '10.4'], ios: ['2.0', '2.0'], watchos: ['2.0', '2.0'], tvos: ['9.0', '9.0'])
  NSURLHandle URLHandleUsingCache(bool shouldUseCache) {
    Pointer<Void> result = perform(SEL('URLHandleUsingCache:'), args:  <dynamic>[shouldUseCache], decodeRetVal: false);
    return NSURLHandle.fromPointer(result);
  }

}bsutton@slayer4:~/git/sounds_ios$ 

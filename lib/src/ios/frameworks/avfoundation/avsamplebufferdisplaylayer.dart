// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avbase.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avanimation.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avqueuedsamplebufferrendering.dart';
// You can uncomment this line when this package is ready.
// import 'package:quartzcore/coreanimation.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmsync.dart';
// You can uncomment this line when this package is ready.
// import 'package:coremedia/cmsamplebuffer.dart';

@NativeAvailable(macos: '10.8', ios: '8.0', tvos: '10.2') @NativeUnavailable(watchos)
@native
class AVSampleBufferDisplayLayer extends CALayer {
  AVSampleBufferDisplayLayer([Class isa]) : super(isa ?? Class('AVSampleBufferDisplayLayer'));
  AVSampleBufferDisplayLayer.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVLayerVideoGravity get videoGravity {
Pointer<Void> result = perform(SEL('videoGravity'), decodeRetVal: false);
    return AVLayerVideoGravity.fromPointer(result);

}
  
  set videoGravity(AVLayerVideoGravity videoGravity) => perform(SEL('setVideoGravity:'), args: [videoGravity]);

}

extension AVSampleBufferDisplayLayerAVSampleBufferDisplayLayerQueueManagement on AVSampleBufferDisplayLayer {
  @NativeAvailable(macos: '10.10', ios: '8.0', tvos: '10.2') @NativeUnavailable(watchos)
  AVQueuedSampleBufferRenderingStatus get status {
Pointer<Void> result = perform(SEL('status'), decodeRetVal: false);
    return AVQueuedSampleBufferRenderingStatus.fromPointer(result);

}
  @NativeAvailable(macos: '10.10', ios: '8.0', tvos: '10.2') @NativeUnavailable(watchos)
  set status(AVQueuedSampleBufferRenderingStatus status) => perform(SEL('setStatus:'), args: [status]);
  @NativeAvailable(macos: '10.10', ios: '8.0', tvos: '10.2') @NativeUnavailable(watchos)
  NSError get error {
Pointer<Void> result = perform(SEL('error'), decodeRetVal: false);
    return NSError.fromPointer(result);

}
  @NativeAvailable(macos: '10.10', ios: '8.0', tvos: '10.2') @NativeUnavailable(watchos)
  set error(NSError error) => perform(SEL('setError:'), args: [error]);
  @NativeAvailable(macos: '11.0', ios: '14.0', tvos: '14.0') @NativeUnavailable(watchos)
  bool get requiresFlushToResumeDecoding {
return perform(SEL('requiresFlushToResumeDecoding'));

}
  @NativeAvailable(macos: '11.0', ios: '14.0', tvos: '14.0') @NativeUnavailable(watchos)
  set requiresFlushToResumeDecoding(bool requiresFlushToResumeDecoding) => perform(SEL('setRequiresFlushToResumeDecoding:'), args: [requiresFlushToResumeDecoding]);
  
  bool get readyForMoreMediaData {
return perform(SEL('readyForMoreMediaData'));

}
  
  set readyForMoreMediaData(bool readyForMoreMediaData) => perform(SEL('setReadyForMoreMediaData:'), args: [readyForMoreMediaData]);
  
  void enqueueSampleBuffer(CMSampleBufferRef sampleBuffer) {
     perform(SEL('enqueueSampleBuffer:'), args: [sampleBuffer]);
  }
  
  void flush() {
     perform(SEL('flush'));
  }
  
  void flushAndRemoveImage() {
     perform(SEL('flushAndRemoveImage'));
  }
  
  void requestMediaDataWhenReadyOnQueueUsingBlock(dispatch_queue_t queue, void block()) {
     perform(SEL('requestMediaDataWhenReadyOnQueue:usingBlock:'), args: [queue,block]);
  }
  
  void stopRequestingMediaData() {
     perform(SEL('stopRequestingMediaData'));
  }

}

extension AVSampleBufferDisplayLayerAVSampleBufferDisplayLayerImageProtection on AVSampleBufferDisplayLayer {
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0') @NativeUnavailable(watchos)
  bool get preventsCapture {
return perform(SEL('preventsCapture'));

}
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0') @NativeUnavailable(watchos)
  set preventsCapture(bool preventsCapture) => perform(SEL('setPreventsCapture:'), args: [preventsCapture]);

}

extension AVSampleBufferDisplayLayerAVSampleBufferDisplayLayerVideoDisplaySleepPrevention on AVSampleBufferDisplayLayer {
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0') @NativeUnavailable(watchos)
  bool get preventsDisplaySleepDuringVideoPlayback {
return perform(SEL('preventsDisplaySleepDuringVideoPlayback'));

}
  @NativeAvailable(macos: '10.15', ios: '13.0', tvos: '13.0') @NativeUnavailable(watchos)
  set preventsDisplaySleepDuringVideoPlayback(bool preventsDisplaySleepDuringVideoPlayback) => perform(SEL('setPreventsDisplaySleepDuringVideoPlayback:'), args: [preventsDisplaySleepDuringVideoPlayback]);

}
// You can uncomment this line when this package is ready.
// import 'package:avfcore/avsamplebufferdisplaylayer.dart';
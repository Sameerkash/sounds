// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avqueuedsamplebufferrendering.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avaudioprocessingsettings.dart';

@NativeAvailable(macos: '10.13', ios: '11.0', tvos: '11.0', watchos: '4.0')
@native
class AVSampleBufferAudioRenderer extends NSObject with AVQueuedSampleBufferRendering {
  AVSampleBufferAudioRenderer([Class isa]) : super(isa ?? Class('AVSampleBufferAudioRenderer'));
  AVSampleBufferAudioRenderer.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVQueuedSampleBufferRenderingStatus get status {
Pointer<Void> result = perform(SEL('status'), decodeRetVal: false);
    return AVQueuedSampleBufferRenderingStatus.fromPointer(result);

}
  
  set status(AVQueuedSampleBufferRenderingStatus status) => perform(SEL('setStatus:'), args: [status]);
  
  NSError get error {
Pointer<Void> result = perform(SEL('error'), decodeRetVal: false);
    return NSError.fromPointer(result);

}
  
  set error(NSError error) => perform(SEL('setError:'), args: [error]);
  @NativeAvailable(macos: '10.13') @NativeUnavailable(ios, tvos, watchos)
  String get audioOutputDeviceUniqueID {
Pointer<Void> result = perform(SEL('audioOutputDeviceUniqueID'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  @NativeAvailable(macos: '10.13') @NativeUnavailable(ios, tvos, watchos)
  set audioOutputDeviceUniqueID(String audioOutputDeviceUniqueID) => perform(SEL('setAudioOutputDeviceUniqueID:'), args: [audioOutputDeviceUniqueID]);
  
  AVAudioTimePitchAlgorithm get audioTimePitchAlgorithm {
Pointer<Void> result = perform(SEL('audioTimePitchAlgorithm'), decodeRetVal: false);
    return AVAudioTimePitchAlgorithm.fromPointer(result);

}
  
  set audioTimePitchAlgorithm(AVAudioTimePitchAlgorithm audioTimePitchAlgorithm) => perform(SEL('setAudioTimePitchAlgorithm:'), args: [audioTimePitchAlgorithm]);

}

extension AVSampleBufferAudioRendererAVSampleBufferAudioRendererVolumeControl on AVSampleBufferAudioRenderer {
  
  double get volume {
return perform(SEL('volume'));

}
  
  set volume(double volume) => perform(SEL('setVolume:'), args: [volume]);
  
  bool get muted {
return perform(SEL('muted'));

}
  
  set muted(bool muted) => perform(SEL('setMuted:'), args: [muted]);

}

extension AVSampleBufferAudioRendererAVSampleBufferAudioRendererQueueManagement on AVSampleBufferAudioRenderer {
  
  void flushFromSourceTimeCompletionHandler(CMTime time, void completionHandler(BOOL flushSucceeded)) {
     perform(SEL('flushFromSourceTime:completionHandler:'), args: [time,completionHandler]);
  }

}
// You can uncomment this line when this package is ready.
// import 'package:avfcore/avsamplebufferaudiorenderer.dart';
// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:os/availability.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudiosessionroute.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudiosessiontypes.dart';
// You can uncomment this line when this package is ready.
// import 'package:coreaudiotypes/audiosessiontypes.dart';

@NativeAvailable(ios: '3.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
@native
class AVAudioSession extends NSObject {
  AVAudioSession([Class isa]) : super(isa ?? Class('AVAudioSession'));
  AVAudioSession.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  @NativeAvailable(ios: '9.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionCategory get availableCategories {
Pointer<Void> result = perform(SEL('availableCategories'), decodeRetVal: false);
    return AVAudioSessionCategory.fromPointer(result);

}
  @NativeAvailable(ios: '9.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set availableCategories(AVAudioSessionCategory availableCategories) => perform(SEL('setAvailableCategories:'), args: [availableCategories]);
  @NativeAvailable(ios: '3.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionCategory get category {
Pointer<Void> result = perform(SEL('category'), decodeRetVal: false);
    return AVAudioSessionCategory.fromPointer(result);

}
  @NativeAvailable(ios: '3.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set category(AVAudioSessionCategory category) => perform(SEL('setCategory:'), args: [category]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionCategoryOptions get categoryOptions {
Pointer<Void> result = perform(SEL('categoryOptions'), decodeRetVal: false);
    return AVAudioSessionCategoryOptions.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set categoryOptions(AVAudioSessionCategoryOptions categoryOptions) => perform(SEL('setCategoryOptions:'), args: [categoryOptions]);
  @NativeAvailable(ios: '11.0', tvos: '11.0', watchos: '5.0') @NativeUnavailable(macos)
  AVAudioSessionRouteSharingPolicy get routeSharingPolicy {
Pointer<Void> result = perform(SEL('routeSharingPolicy'), decodeRetVal: false);
    return AVAudioSessionRouteSharingPolicy.fromPointer(result);

}
  @NativeAvailable(ios: '11.0', tvos: '11.0', watchos: '5.0') @NativeUnavailable(macos)
  set routeSharingPolicy(AVAudioSessionRouteSharingPolicy routeSharingPolicy) => perform(SEL('setRouteSharingPolicy:'), args: [routeSharingPolicy]);
  @NativeAvailable(ios: '9.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionMode get availableModes {
Pointer<Void> result = perform(SEL('availableModes'), decodeRetVal: false);
    return AVAudioSessionMode.fromPointer(result);

}
  @NativeAvailable(ios: '9.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set availableModes(AVAudioSessionMode availableModes) => perform(SEL('setAvailableModes:'), args: [availableModes]);
  @NativeAvailable(ios: '5.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionMode get mode {
Pointer<Void> result = perform(SEL('mode'), decodeRetVal: false);
    return AVAudioSessionMode.fromPointer(result);

}
  @NativeAvailable(ios: '5.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set mode(AVAudioSessionMode mode) => perform(SEL('setMode:'), args: [mode]);
  @NativeAvailable(ios: '13.0', watchos: '6.0', tvos: '13.0') @NativeUnavailable(macos)
  bool get allowHapticsAndSystemSoundsDuringRecording {
return perform(SEL('allowHapticsAndSystemSoundsDuringRecording'));

}
  @NativeAvailable(ios: '13.0', watchos: '6.0', tvos: '13.0') @NativeUnavailable(macos)
  set allowHapticsAndSystemSoundsDuringRecording(bool allowHapticsAndSystemSoundsDuringRecording) => perform(SEL('setAllowHapticsAndSystemSoundsDuringRecording:'), args: [allowHapticsAndSystemSoundsDuringRecording]);
  @NativeAvailable(ios: '8.0', watchos: '4.0') @NativeUnavailable(macos, tvos)
  AVAudioSessionRecordPermission get recordPermission {
Pointer<Void> result = perform(SEL('recordPermission'), decodeRetVal: false);
    return AVAudioSessionRecordPermission.fromPointer(result);

}
  @NativeAvailable(ios: '8.0', watchos: '4.0') @NativeUnavailable(macos, tvos)
  set recordPermission(AVAudioSessionRecordPermission recordPermission) => perform(SEL('setRecordPermission:'), args: [recordPermission]);
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  AVAudioSessionPortDescription get preferredInput {
Pointer<Void> result = perform(SEL('preferredInput'), decodeRetVal: false);
    return AVAudioSessionPortDescription.fromPointer(result);

}
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  set preferredInput(AVAudioSessionPortDescription preferredInput) => perform(SEL('setPreferredInput:'), args: [preferredInput]);
  @NativeAvailable(ios: '3.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  static AVAudioSession sharedInstance() {
    Pointer<Void> result = Class('AVAudioSession').perform(SEL('sharedInstance'), decodeRetVal: false);
    return AVAudioSession.fromPointer(result);
  }
  @NativeAvailable(ios: '3.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool setCategoryError(AVAudioSessionCategory category, NSObjectRef<NSError> outError) {
    return perform(SEL('setCategory:error:'), args: [category,outError]);
  }
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool setCategoryWithOptionsError(AVAudioSessionCategory category, AVAudioSessionCategoryOptions options, NSObjectRef<NSError> outError) {
    return perform(SEL('setCategory:withOptions:error:'), args: [category,options,outError]);
  }
  @NativeAvailable(ios: '10.0', watchos: '3.0', tvos: '10.0') @NativeUnavailable(macos)
  bool setCategoryModeOptionsError(AVAudioSessionCategory category, AVAudioSessionMode mode, AVAudioSessionCategoryOptions options, NSObjectRef<NSError> outError) {
    return perform(SEL('setCategory:mode:options:error:'), args: [category,mode,options,outError]);
  }
  @NativeAvailable(ios: '11.0', tvos: '11.0', watchos: '5.0') @NativeUnavailable(macos)
  bool setCategoryModeRouteSharingPolicyOptionsError(AVAudioSessionCategory category, AVAudioSessionMode mode, AVAudioSessionRouteSharingPolicy policy, AVAudioSessionCategoryOptions options, NSObjectRef<NSError> outError) {
    return perform(SEL('setCategory:mode:routeSharingPolicy:options:error:'), args: [category,mode,policy,options,outError]);
  }
  @NativeAvailable(ios: '5.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool setModeError(AVAudioSessionMode mode, NSObjectRef<NSError> outError) {
    return perform(SEL('setMode:error:'), args: [mode,outError]);
  }
  @NativeAvailable(ios: '13.0', watchos: '6.0', tvos: '13.0') @NativeUnavailable(macos)
  bool setAllowHapticsAndSystemSoundsDuringRecordingError(bool inValue, NSObjectRef<NSError> outError) {
    return perform(SEL('setAllowHapticsAndSystemSoundsDuringRecording:error:'), args: [inValue,outError]);
  }
  @NativeAvailable(ios: '7.0', watchos: '4.0') @NativeUnavailable(macos, tvos)
  void requestRecordPermission(void response(BOOL granted)) {
     perform(SEL('requestRecordPermission:'), args: [response]);
  }
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool overrideOutputAudioPortError(AVAudioSessionPortOverride portOverride, NSObjectRef<NSError> outError) {
    return perform(SEL('overrideOutputAudioPort:error:'), args: [portOverride,outError]);
  }
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setPreferredInputError(NSObjectRef<NSError> outError, {AVAudioSessionPortDescription inPort}) {
    return perform(SEL('setPreferredInput:error:'), args: [inPort,outError]);
  }

}

extension AVAudioSessionActivation on AVAudioSession {
  @NativeAvailable(ios: '3.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool setActiveError(bool active, NSObjectRef<NSError> outError) {
    return perform(SEL('setActive:error:'), args: [active,outError]);
  }
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool setActiveWithOptionsError(bool active, AVAudioSessionSetActiveOptions options, NSObjectRef<NSError> outError) {
    return perform(SEL('setActive:withOptions:error:'), args: [active,options,outError]);
  }
  @NativeAvailable(watchos: '5.0') @NativeUnavailable(ios, tvos) @NativeUnavailable(macos, macCatalyst)
  void activateWithOptionsCompletionHandler(AVAudioSessionActivationOptions options, {void handler(BOOL activated, NSError error)}) {
     perform(SEL('activateWithOptions:completionHandler:'), args: [options,handler]);
  }

}

extension AVAudioSessionAVAudioSessionHardwareConfiguration on AVAudioSession {
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  double get preferredSampleRate {
return perform(SEL('preferredSampleRate'));

}
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  set preferredSampleRate(double preferredSampleRate) => perform(SEL('setPreferredSampleRate:'), args: [preferredSampleRate]);
  @NativeAvailable(ios: '3.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  NSTimeInterval get preferredIOBufferDuration {
Pointer<Void> result = perform(SEL('preferredIOBufferDuration'), decodeRetVal: false);
    return NSTimeInterval.fromPointer(result);

}
  @NativeAvailable(ios: '3.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  set preferredIOBufferDuration(NSTimeInterval preferredIOBufferDuration) => perform(SEL('setPreferredIOBufferDuration:'), args: [preferredIOBufferDuration]);
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  NSInteger get preferredInputNumberOfChannels {
return perform(SEL('preferredInputNumberOfChannels'));

}
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  set preferredInputNumberOfChannels(NSInteger preferredInputNumberOfChannels) => perform(SEL('setPreferredInputNumberOfChannels:'), args: [preferredInputNumberOfChannels]);
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  NSInteger get preferredOutputNumberOfChannels {
return perform(SEL('preferredOutputNumberOfChannels'));

}
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  set preferredOutputNumberOfChannels(NSInteger preferredOutputNumberOfChannels) => perform(SEL('setPreferredOutputNumberOfChannels:'), args: [preferredOutputNumberOfChannels]);
  @NativeAvailable(ios: '14.0') @NativeUnavailable(watchos, tvos, macos)
  AVAudioStereoOrientation get preferredInputOrientation {
Pointer<Void> result = perform(SEL('preferredInputOrientation'), decodeRetVal: false);
    return AVAudioStereoOrientation.fromPointer(result);

}
  @NativeAvailable(ios: '14.0') @NativeUnavailable(watchos, tvos, macos)
  set preferredInputOrientation(AVAudioStereoOrientation preferredInputOrientation) => perform(SEL('setPreferredInputOrientation:'), args: [preferredInputOrientation]);
  @NativeAvailable(ios: '14.0') @NativeUnavailable(watchos, tvos, macos)
  AVAudioStereoOrientation get inputOrientation {
Pointer<Void> result = perform(SEL('inputOrientation'), decodeRetVal: false);
    return AVAudioStereoOrientation.fromPointer(result);

}
  @NativeAvailable(ios: '14.0') @NativeUnavailable(watchos, tvos, macos)
  set inputOrientation(AVAudioStereoOrientation inputOrientation) => perform(SEL('setInputOrientation:'), args: [inputOrientation]);
  @NativeAvailable(ios: '7.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  NSInteger get maximumInputNumberOfChannels {
return perform(SEL('maximumInputNumberOfChannels'));

}
  @NativeAvailable(ios: '7.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set maximumInputNumberOfChannels(NSInteger maximumInputNumberOfChannels) => perform(SEL('setMaximumInputNumberOfChannels:'), args: [maximumInputNumberOfChannels]);
  @NativeAvailable(ios: '7.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  NSInteger get maximumOutputNumberOfChannels {
return perform(SEL('maximumOutputNumberOfChannels'));

}
  @NativeAvailable(ios: '7.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set maximumOutputNumberOfChannels(NSInteger maximumOutputNumberOfChannels) => perform(SEL('setMaximumOutputNumberOfChannels:'), args: [maximumOutputNumberOfChannels]);
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  double get inputGain {
return perform(SEL('inputGain'));

}
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  set inputGain(double inputGain) => perform(SEL('setInputGain:'), args: [inputGain]);
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool get inputGainSettable {
return perform(SEL('inputGainSettable'));

}
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  set inputGainSettable(bool inputGainSettable) => perform(SEL('setInputGainSettable:'), args: [inputGainSettable]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool get inputAvailable {
return perform(SEL('inputAvailable'));

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set inputAvailable(bool inputAvailable) => perform(SEL('setInputAvailable:'), args: [inputAvailable]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionDataSourceDescription get inputDataSources {
Pointer<Void> result = perform(SEL('inputDataSources'), decodeRetVal: false);
    return AVAudioSessionDataSourceDescription.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set inputDataSources(AVAudioSessionDataSourceDescription inputDataSources) => perform(SEL('setInputDataSources:'), args: [inputDataSources]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionDataSourceDescription get inputDataSource {
Pointer<Void> result = perform(SEL('inputDataSource'), decodeRetVal: false);
    return AVAudioSessionDataSourceDescription.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set inputDataSource(AVAudioSessionDataSourceDescription inputDataSource) => perform(SEL('setInputDataSource:'), args: [inputDataSource]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionDataSourceDescription get outputDataSources {
Pointer<Void> result = perform(SEL('outputDataSources'), decodeRetVal: false);
    return AVAudioSessionDataSourceDescription.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set outputDataSources(AVAudioSessionDataSourceDescription outputDataSources) => perform(SEL('setOutputDataSources:'), args: [outputDataSources]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionDataSourceDescription get outputDataSource {
Pointer<Void> result = perform(SEL('outputDataSource'), decodeRetVal: false);
    return AVAudioSessionDataSourceDescription.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set outputDataSource(AVAudioSessionDataSourceDescription outputDataSource) => perform(SEL('setOutputDataSource:'), args: [outputDataSource]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  double get sampleRate {
return perform(SEL('sampleRate'));

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set sampleRate(double sampleRate) => perform(SEL('setSampleRate:'), args: [sampleRate]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  NSInteger get inputNumberOfChannels {
return perform(SEL('inputNumberOfChannels'));

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set inputNumberOfChannels(NSInteger inputNumberOfChannels) => perform(SEL('setInputNumberOfChannels:'), args: [inputNumberOfChannels]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  NSInteger get outputNumberOfChannels {
return perform(SEL('outputNumberOfChannels'));

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set outputNumberOfChannels(NSInteger outputNumberOfChannels) => perform(SEL('setOutputNumberOfChannels:'), args: [outputNumberOfChannels]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  NSTimeInterval get inputLatency {
Pointer<Void> result = perform(SEL('inputLatency'), decodeRetVal: false);
    return NSTimeInterval.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set inputLatency(NSTimeInterval inputLatency) => perform(SEL('setInputLatency:'), args: [inputLatency]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  NSTimeInterval get outputLatency {
Pointer<Void> result = perform(SEL('outputLatency'), decodeRetVal: false);
    return NSTimeInterval.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set outputLatency(NSTimeInterval outputLatency) => perform(SEL('setOutputLatency:'), args: [outputLatency]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  NSTimeInterval get IOBufferDuration {
Pointer<Void> result = perform(SEL('IOBufferDuration'), decodeRetVal: false);
    return NSTimeInterval.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set IOBufferDuration(NSTimeInterval IOBufferDuration) => perform(SEL('setIOBufferDuration:'), args: [IOBufferDuration]);
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setPreferredSampleRateError(double sampleRate, NSObjectRef<NSError> outError) {
    return perform(SEL('setPreferredSampleRate:error:'), args: [sampleRate,outError]);
  }
  @NativeAvailable(ios: '3.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setPreferredIOBufferDurationError(NSTimeInterval duration, NSObjectRef<NSError> outError) {
    return perform(SEL('setPreferredIOBufferDuration:error:'), args: [duration,outError]);
  }
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setPreferredInputNumberOfChannelsError(NSInteger count, NSObjectRef<NSError> outError) {
    return perform(SEL('setPreferredInputNumberOfChannels:error:'), args: [count,outError]);
  }
  @NativeAvailable(ios: '7.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setPreferredOutputNumberOfChannelsError(NSInteger count, NSObjectRef<NSError> outError) {
    return perform(SEL('setPreferredOutputNumberOfChannels:error:'), args: [count,outError]);
  }
  @NativeAvailable(ios: '14.0') @NativeUnavailable(watchos, tvos, macos)
  bool setPreferredInputOrientationError(AVAudioStereoOrientation orientation, NSObjectRef<NSError> outError) {
    return perform(SEL('setPreferredInputOrientation:error:'), args: [orientation,outError]);
  }
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setInputGainError(double gain, NSObjectRef<NSError> outError) {
    return perform(SEL('setInputGain:error:'), args: [gain,outError]);
  }
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setInputDataSourceError(NSObjectRef<NSError> outError, {AVAudioSessionDataSourceDescription dataSource}) {
    return perform(SEL('setInputDataSource:error:'), args: [dataSource,outError]);
  }
  @NativeAvailable(ios: '6.0', tvos: '9.0') @NativeUnavailable(watchos, macos)
  bool setOutputDataSourceError(NSObjectRef<NSError> outError, {AVAudioSessionDataSourceDescription dataSource}) {
    return perform(SEL('setOutputDataSource:error:'), args: [dataSource,outError]);
  }

}

extension AVAudioSessionObservation on AVAudioSession {
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool get otherAudioPlaying {
return perform(SEL('otherAudioPlaying'));

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set otherAudioPlaying(bool otherAudioPlaying) => perform(SEL('setOtherAudioPlaying:'), args: [otherAudioPlaying]);
  @NativeAvailable(ios: '8.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  bool get secondaryAudioShouldBeSilencedHint {
return perform(SEL('secondaryAudioShouldBeSilencedHint'));

}
  @NativeAvailable(ios: '8.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set secondaryAudioShouldBeSilencedHint(bool secondaryAudioShouldBeSilencedHint) => perform(SEL('setSecondaryAudioShouldBeSilencedHint:'), args: [secondaryAudioShouldBeSilencedHint]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  double get outputVolume {
return perform(SEL('outputVolume'));

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set outputVolume(double outputVolume) => perform(SEL('setOutputVolume:'), args: [outputVolume]);
  @NativeAvailable(ios: '13.0', watchos: '6.0', tvos: '13.0') @NativeUnavailable(macos)
  AVAudioSessionPromptStyle get promptStyle {
Pointer<Void> result = perform(SEL('promptStyle'), decodeRetVal: false);
    return AVAudioSessionPromptStyle.fromPointer(result);

}
  @NativeAvailable(ios: '13.0', watchos: '6.0', tvos: '13.0') @NativeUnavailable(macos)
  set promptStyle(AVAudioSessionPromptStyle promptStyle) => perform(SEL('setPromptStyle:'), args: [promptStyle]);

}

extension AVAudioSessionRoutingConfiguration on AVAudioSession {
  @NativeAvailable(ios: '7.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionPortDescription get availableInputs {
Pointer<Void> result = perform(SEL('availableInputs'), decodeRetVal: false);
    return AVAudioSessionPortDescription.fromPointer(result);

}
  @NativeAvailable(ios: '7.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set availableInputs(AVAudioSessionPortDescription availableInputs) => perform(SEL('setAvailableInputs:'), args: [availableInputs]);
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  AVAudioSessionRouteDescription get currentRoute {
Pointer<Void> result = perform(SEL('currentRoute'), decodeRetVal: false);
    return AVAudioSessionRouteDescription.fromPointer(result);

}
  @NativeAvailable(ios: '6.0', watchos: '2.0', tvos: '9.0') @NativeUnavailable(macos)
  set currentRoute(AVAudioSessionRouteDescription currentRoute) => perform(SEL('setCurrentRoute:'), args: [currentRoute]);
  @NativeAvailable(ios: '10.0') @NativeUnavailable(tvos, watchos, macos)
  bool setAggregatedIOPreferenceError(AVAudioSessionIOType inIOType, NSObjectRef<NSError> outError) {
    return perform(SEL('setAggregatedIOPreference:error:'), args: [inIOType,outError]);
  }

}
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudiosessiondeprecated.dart';
// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfaudio/avaudiotypes.dart';

@NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
@native
class AVAudioBuffer extends NSObject with NSCopying,NSMutableCopying {
  AVAudioBuffer([Class isa]) : super(isa ?? Class('AVAudioBuffer'));
  AVAudioBuffer.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVAudioFormat get format {
Pointer<Void> result = perform(SEL('format'), decodeRetVal: false);
    return AVAudioFormat.fromPointer(result);

}
  
  set format(AVAudioFormat format) => perform(SEL('setFormat:'), args: [format]);
  
  AudioBufferList get audioBufferList {
Pointer<Void> result = perform(SEL('audioBufferList'), decodeRetVal: false);
    return AudioBufferList.fromPointer(result);

}
  
  set audioBufferList(AudioBufferList audioBufferList) => perform(SEL('setAudioBufferList:'), args: [audioBufferList]);
  
  AudioBufferList get mutableAudioBufferList {
Pointer<Void> result = perform(SEL('mutableAudioBufferList'), decodeRetVal: false);
    return AudioBufferList.fromPointer(result);

}
  
  set mutableAudioBufferList(AudioBufferList mutableAudioBufferList) => perform(SEL('setMutableAudioBufferList:'), args: [mutableAudioBufferList]);

}

@NativeAvailable(macos: '10.10', ios: '8.0', watchos: '2.0', tvos: '9.0')
@native
class AVAudioPCMBuffer extends AVAudioBuffer {
  AVAudioPCMBuffer([Class isa]) : super(isa ?? Class('AVAudioPCMBuffer'));
  AVAudioPCMBuffer.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVAudioFrameCount get frameCapacity {
Pointer<Void> result = perform(SEL('frameCapacity'), decodeRetVal: false);
    return AVAudioFrameCount.fromPointer(result);

}
  
  set frameCapacity(AVAudioFrameCount frameCapacity) => perform(SEL('setFrameCapacity:'), args: [frameCapacity]);
  
  AVAudioFrameCount get frameLength {
Pointer<Void> result = perform(SEL('frameLength'), decodeRetVal: false);
    return AVAudioFrameCount.fromPointer(result);

}
  
  set frameLength(AVAudioFrameCount frameLength) => perform(SEL('setFrameLength:'), args: [frameLength]);
  
  NSUInteger get stride {
return perform(SEL('stride'));

}
  
  set stride(NSUInteger stride) => perform(SEL('setStride:'), args: [stride]);
  
  double get floatChannelData {
return perform(SEL('floatChannelData'));

}
  
  set floatChannelData(double floatChannelData) => perform(SEL('setFloatChannelData:'), args: [floatChannelData]);
  
  int get int16ChannelData {
return perform(SEL('int16ChannelData'));

}
  
  set int16ChannelData(int int16ChannelData) => perform(SEL('setInt16ChannelData:'), args: [int16ChannelData]);
  
  int get int32ChannelData {
return perform(SEL('int32ChannelData'));

}
  
  set int32ChannelData(int int32ChannelData) => perform(SEL('setInt32ChannelData:'), args: [int32ChannelData]);
  AVAudioPCMBuffer(AVAudioFormat format, AVAudioFrameCount frameCapacity)
     : super.fromPointer(_initWithPCMFormatFrameCapacity(format,frameCapacity));

  static Pointer<Void> _initWithPCMFormatFrameCapacity(AVAudioFormat format, AVAudioFrameCount frameCapacity) {
    Pointer<Void> target = alloc(Class('AVAudioPCMBuffer'));
    SEL sel = SEL('initWithPCMFormat:frameCapacity:');
    return msgSend(target, sel, args: [format,frameCapacity], decodeRetVal: false);
  }


}

@NativeAvailable(macos: '10.11', ios: '9.0', watchos: '2.0', tvos: '9.0')
@native
class AVAudioCompressedBuffer extends AVAudioBuffer {
  AVAudioCompressedBuffer([Class isa]) : super(isa ?? Class('AVAudioCompressedBuffer'));
  AVAudioCompressedBuffer.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  AVAudioPacketCount get packetCapacity {
Pointer<Void> result = perform(SEL('packetCapacity'), decodeRetVal: false);
    return AVAudioPacketCount.fromPointer(result);

}
  
  set packetCapacity(AVAudioPacketCount packetCapacity) => perform(SEL('setPacketCapacity:'), args: [packetCapacity]);
  
  AVAudioPacketCount get packetCount {
Pointer<Void> result = perform(SEL('packetCount'), decodeRetVal: false);
    return AVAudioPacketCount.fromPointer(result);

}
  
  set packetCount(AVAudioPacketCount packetCount) => perform(SEL('setPacketCount:'), args: [packetCount]);
  
  NSInteger get maximumPacketSize {
return perform(SEL('maximumPacketSize'));

}
  
  set maximumPacketSize(NSInteger maximumPacketSize) => perform(SEL('setMaximumPacketSize:'), args: [maximumPacketSize]);
  
  Pointer<Void> get data {
return perform(SEL('data'));

}
  
  set data(Pointer<Void> data) => perform(SEL('setData:'), args: [data]);
  @NativeAvailable(macosx: '10.13', ios: '11.0', watchos: '4.0', tvos: '11.0')
  int get byteCapacity {
return perform(SEL('byteCapacity'));

}
  @NativeAvailable(macosx: '10.13', ios: '11.0', watchos: '4.0', tvos: '11.0')
  set byteCapacity(int byteCapacity) => perform(SEL('setByteCapacity:'), args: [byteCapacity]);
  @NativeAvailable(macosx: '10.13', ios: '11.0', watchos: '4.0', tvos: '11.0')
  int get byteLength {
return perform(SEL('byteLength'));

}
  @NativeAvailable(macosx: '10.13', ios: '11.0', watchos: '4.0', tvos: '11.0')
  set byteLength(int byteLength) => perform(SEL('setByteLength:'), args: [byteLength]);
  
  AudioStreamPacketDescription get packetDescriptions {
Pointer<Void> result = perform(SEL('packetDescriptions'), decodeRetVal: false);
    return AudioStreamPacketDescription.fromPointer(result);

}
  
  set packetDescriptions(AudioStreamPacketDescription packetDescriptions) => perform(SEL('setPacketDescriptions:'), args: [packetDescriptions]);
  AVAudioCompressedBuffer.initWithFormatPacketCapacityMaximumPacketSize(AVAudioFormat format, AVAudioPacketCount packetCapacity, NSInteger maximumPacketSize)
     : super.fromPointer(_initWithFormatPacketCapacityMaximumPacketSize(format,packetCapacity,maximumPacketSize));

  static Pointer<Void> _initWithFormatPacketCapacityMaximumPacketSize(AVAudioFormat format, AVAudioPacketCount packetCapacity, NSInteger maximumPacketSize) {
    Pointer<Void> target = alloc(Class('AVAudioCompressedBuffer'));
    SEL sel = SEL('initWithFormat:packetCapacity:maximumPacketSize:');
    return msgSend(target, sel, args: [format,packetCapacity,maximumPacketSize], decodeRetVal: false);
  }

  AVAudioCompressedBuffer.initWithFormatPacketCapacity(AVAudioFormat format, AVAudioPacketCount packetCapacity)
     : super.fromPointer(_initWithFormatPacketCapacity(format,packetCapacity));

  static Pointer<Void> _initWithFormatPacketCapacity(AVAudioFormat format, AVAudioPacketCount packetCapacity) {
    Pointer<Void> target = alloc(Class('AVAudioCompressedBuffer'));
    SEL sel = SEL('initWithFormat:packetCapacity:');
    return msgSend(target, sel, args: [format,packetCapacity], decodeRetVal: false);
  }


}
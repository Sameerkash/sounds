// Generated by @dartnative/codegen:
// https://www.npmjs.com/package/@dartnative/codegen

import 'dart:ffi';

import 'package:dart_native/dart_native.dart';
import 'package:dart_native_gen/dart_native_gen.dart';
// You can uncomment this line when this package is ready.
// import 'package:avfoundation/avcaptureoutputbase.dart';

@NativeAvailable(macos: '10.7') @NativeUnavailable(ios, watchos, tvos)
@native
class AVCaptureAudioPreviewOutput extends AVCaptureOutput {
  AVCaptureAudioPreviewOutput([Class isa]) : super(isa ?? Class('AVCaptureAudioPreviewOutput'));
  AVCaptureAudioPreviewOutput.fromPointer(Pointer<Void> ptr) : super.fromPointer(ptr);
  
  String get outputDeviceUniqueID {
Pointer<Void> result = perform(SEL('outputDeviceUniqueID'), decodeRetVal: false);
    return NSString.fromPointer(result).raw;

}
  
  set outputDeviceUniqueID(String outputDeviceUniqueID) => perform(SEL('setOutputDeviceUniqueID:'), args: [outputDeviceUniqueID]);
  
  double get volume {
return perform(SEL('volume'));

}
  
  set volume(double volume) => perform(SEL('setVolume:'), args: [volume]);
  AVCaptureAudioPreviewOutput()
     : super.fromPointer(_init());

  static Pointer<Void> _init() {
    Pointer<Void> target = alloc(Class('AVCaptureAudioPreviewOutput'));
    SEL sel = SEL('init');
    return msgSend(target, sel, args: [], decodeRetVal: false);
  }

  
  static AVCaptureAudioPreviewOutput new() {
    Pointer<Void> result = Class('AVCaptureAudioPreviewOutput').perform(SEL('new'), decodeRetVal: false);
    return AVCaptureAudioPreviewOutput.fromPointer(result);
  }

}
// You can uncomment this line when this package is ready.
// import 'package:avfcapture/avcaptureaudiopreviewoutput.dart';
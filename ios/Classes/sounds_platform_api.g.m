// Autogenerated from Pigeon (v0.1.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "sounds_platform_api.g.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface FLTResponse ()
+(FLTResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTInitializePlayer ()
+(FLTInitializePlayer*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSoundPlayerProxy ()
+(FLTSoundPlayerProxy*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTInitializePlayerWithShade ()
+(FLTInitializePlayerWithShade*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTStartPlayer ()
+(FLTStartPlayer*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTTrackProxy ()
+(FLTTrackProxy*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTMediaFormatProxy ()
+(FLTMediaFormatProxy*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSeekToPlayer ()
+(FLTSeekToPlayer*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTDurationResponse ()
+(FLTDurationResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTGetDuration ()
+(FLTGetDuration*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetVolume ()
+(FLTSetVolume*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetPlaybackProgressInterval ()
+(FLTSetPlaybackProgressInterval*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTRequestAudioFocus ()
+(FLTRequestAudioFocus*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTAudioFocusProxy ()
+(FLTAudioFocusProxy*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTBoolResponse ()
+(FLTBoolResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSoundRecorderProxy ()
+(FLTSoundRecorderProxy*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTStartRecording ()
+(FLTStartRecording*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTAudioSourceProxy ()
+(FLTAudioSourceProxy*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTQualityProxy ()
+(FLTQualityProxy*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTMediaFormatResponse ()
+(FLTMediaFormatResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSetRecordingProgressInterval ()
+(FLTSetRecordingProgressInterval*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnPlaybackProgress ()
+(FLTOnPlaybackProgress*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnPlaybackFinished ()
+(FLTOnPlaybackFinished*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnShadeSkipForward ()
+(FLTOnShadeSkipForward*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnShadeSkipBackward ()
+(FLTOnShadeSkipBackward*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnShadePaused ()
+(FLTOnShadePaused*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnShadeResumed ()
+(FLTOnShadeResumed*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnRecordingProgress ()
+(FLTOnRecordingProgress*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTOnError ()
+(FLTOnError*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FLTResponse
+(FLTResponse*)fromMap:(NSDictionary*)dict {
  FLTResponse* result = [[FLTResponse alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.errorCode = dict[@"errorCode"];
  if ((NSNull *)result.errorCode == [NSNull null]) {
    result.errorCode = nil;
  }
  result.error = dict[@"error"];
  if ((NSNull *)result.error == [NSNull null]) {
    result.error = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.errorCode ? self.errorCode : [NSNull null]), @"errorCode", (self.error ? self.error : [NSNull null]), @"error", nil];
}
@end

@implementation FLTInitializePlayer
+(FLTInitializePlayer*)fromMap:(NSDictionary*)dict {
  FLTInitializePlayer* result = [[FLTInitializePlayer alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.playInBackground = dict[@"playInBackground"];
  if ((NSNull *)result.playInBackground == [NSNull null]) {
    result.playInBackground = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.playInBackground ? self.playInBackground : [NSNull null]), @"playInBackground", nil];
}
@end

@implementation FLTSoundPlayerProxy
+(FLTSoundPlayerProxy*)fromMap:(NSDictionary*)dict {
  FLTSoundPlayerProxy* result = [[FLTSoundPlayerProxy alloc] init];
  result.uuid = dict[@"uuid"];
  if ((NSNull *)result.uuid == [NSNull null]) {
    result.uuid = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uuid ? self.uuid : [NSNull null]), @"uuid", nil];
}
@end

@implementation FLTInitializePlayerWithShade
+(FLTInitializePlayerWithShade*)fromMap:(NSDictionary*)dict {
  FLTInitializePlayerWithShade* result = [[FLTInitializePlayerWithShade alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.playInBackground = dict[@"playInBackground"];
  if ((NSNull *)result.playInBackground == [NSNull null]) {
    result.playInBackground = nil;
  }
  result.canPause = dict[@"canPause"];
  if ((NSNull *)result.canPause == [NSNull null]) {
    result.canPause = nil;
  }
  result.canSkipBackward = dict[@"canSkipBackward"];
  if ((NSNull *)result.canSkipBackward == [NSNull null]) {
    result.canSkipBackward = nil;
  }
  result.canSkipForward = dict[@"canSkipForward"];
  if ((NSNull *)result.canSkipForward == [NSNull null]) {
    result.canSkipForward = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.playInBackground ? self.playInBackground : [NSNull null]), @"playInBackground", (self.canPause ? self.canPause : [NSNull null]), @"canPause", (self.canSkipBackward ? self.canSkipBackward : [NSNull null]), @"canSkipBackward", (self.canSkipForward ? self.canSkipForward : [NSNull null]), @"canSkipForward", nil];
}
@end

@implementation FLTStartPlayer
+(FLTStartPlayer*)fromMap:(NSDictionary*)dict {
  FLTStartPlayer* result = [[FLTStartPlayer alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  result.startAt = dict[@"startAt"];
  if ((NSNull *)result.startAt == [NSNull null]) {
    result.startAt = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.track ? [self.track toMap] : [NSNull null]), @"track", (self.startAt ? self.startAt : [NSNull null]), @"startAt", nil];
}
@end

@implementation FLTTrackProxy
+(FLTTrackProxy*)fromMap:(NSDictionary*)dict {
  FLTTrackProxy* result = [[FLTTrackProxy alloc] init];
  result.uuid = dict[@"uuid"];
  if ((NSNull *)result.uuid == [NSNull null]) {
    result.uuid = nil;
  }
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  result.mediaFormat = [FLTMediaFormatProxy fromMap:dict[@"mediaFormat"]];
  if ((NSNull *)result.mediaFormat == [NSNull null]) {
    result.mediaFormat = nil;
  }
  result.title = dict[@"title"];
  if ((NSNull *)result.title == [NSNull null]) {
    result.title = nil;
  }
  result.artist = dict[@"artist"];
  if ((NSNull *)result.artist == [NSNull null]) {
    result.artist = nil;
  }
  result.album = dict[@"album"];
  if ((NSNull *)result.album == [NSNull null]) {
    result.album = nil;
  }
  result.albumArtUrl = dict[@"albumArtUrl"];
  if ((NSNull *)result.albumArtUrl == [NSNull null]) {
    result.albumArtUrl = nil;
  }
  result.albumArtAsset = dict[@"albumArtAsset"];
  if ((NSNull *)result.albumArtAsset == [NSNull null]) {
    result.albumArtAsset = nil;
  }
  result.albumArtFile = dict[@"albumArtFile"];
  if ((NSNull *)result.albumArtFile == [NSNull null]) {
    result.albumArtFile = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uuid ? self.uuid : [NSNull null]), @"uuid", (self.path ? self.path : [NSNull null]), @"path", (self.mediaFormat ? [self.mediaFormat toMap] : [NSNull null]), @"mediaFormat", (self.title ? self.title : [NSNull null]), @"title", (self.artist ? self.artist : [NSNull null]), @"artist", (self.album ? self.album : [NSNull null]), @"album", (self.albumArtUrl ? self.albumArtUrl : [NSNull null]), @"albumArtUrl", (self.albumArtAsset ? self.albumArtAsset : [NSNull null]), @"albumArtAsset", (self.albumArtFile ? self.albumArtFile : [NSNull null]), @"albumArtFile", nil];
}
@end

@implementation FLTMediaFormatProxy
+(FLTMediaFormatProxy*)fromMap:(NSDictionary*)dict {
  FLTMediaFormatProxy* result = [[FLTMediaFormatProxy alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.sampleRate = dict[@"sampleRate"];
  if ((NSNull *)result.sampleRate == [NSNull null]) {
    result.sampleRate = nil;
  }
  result.numChannels = dict[@"numChannels"];
  if ((NSNull *)result.numChannels == [NSNull null]) {
    result.numChannels = nil;
  }
  result.bitRate = dict[@"bitRate"];
  if ((NSNull *)result.bitRate == [NSNull null]) {
    result.bitRate = nil;
  }
  result.adtsAac = dict[@"adtsAac"];
  if ((NSNull *)result.adtsAac == [NSNull null]) {
    result.adtsAac = nil;
  }
  result.capOpus = dict[@"capOpus"];
  if ((NSNull *)result.capOpus == [NSNull null]) {
    result.capOpus = nil;
  }
  result.mp3 = dict[@"mp3"];
  if ((NSNull *)result.mp3 == [NSNull null]) {
    result.mp3 = nil;
  }
  result.oggOpus = dict[@"oggOpus"];
  if ((NSNull *)result.oggOpus == [NSNull null]) {
    result.oggOpus = nil;
  }
  result.oggVorbis = dict[@"oggVorbis"];
  if ((NSNull *)result.oggVorbis == [NSNull null]) {
    result.oggVorbis = nil;
  }
  result.pcm = dict[@"pcm"];
  if ((NSNull *)result.pcm == [NSNull null]) {
    result.pcm = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", (self.sampleRate ? self.sampleRate : [NSNull null]), @"sampleRate", (self.numChannels ? self.numChannels : [NSNull null]), @"numChannels", (self.bitRate ? self.bitRate : [NSNull null]), @"bitRate", (self.adtsAac ? self.adtsAac : [NSNull null]), @"adtsAac", (self.capOpus ? self.capOpus : [NSNull null]), @"capOpus", (self.mp3 ? self.mp3 : [NSNull null]), @"mp3", (self.oggOpus ? self.oggOpus : [NSNull null]), @"oggOpus", (self.oggVorbis ? self.oggVorbis : [NSNull null]), @"oggVorbis", (self.pcm ? self.pcm : [NSNull null]), @"pcm", nil];
}
@end

@implementation FLTSeekToPlayer
+(FLTSeekToPlayer*)fromMap:(NSDictionary*)dict {
  FLTSeekToPlayer* result = [[FLTSeekToPlayer alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.milliseconds = dict[@"milliseconds"];
  if ((NSNull *)result.milliseconds == [NSNull null]) {
    result.milliseconds = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.milliseconds ? self.milliseconds : [NSNull null]), @"milliseconds", nil];
}
@end

@implementation FLTDurationResponse
+(FLTDurationResponse*)fromMap:(NSDictionary*)dict {
  FLTDurationResponse* result = [[FLTDurationResponse alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.errorCode = dict[@"errorCode"];
  if ((NSNull *)result.errorCode == [NSNull null]) {
    result.errorCode = nil;
  }
  result.error = dict[@"error"];
  if ((NSNull *)result.error == [NSNull null]) {
    result.error = nil;
  }
  result.duration = dict[@"duration"];
  if ((NSNull *)result.duration == [NSNull null]) {
    result.duration = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.errorCode ? self.errorCode : [NSNull null]), @"errorCode", (self.error ? self.error : [NSNull null]), @"error", (self.duration ? self.duration : [NSNull null]), @"duration", nil];
}
@end

@implementation FLTGetDuration
+(FLTGetDuration*)fromMap:(NSDictionary*)dict {
  FLTGetDuration* result = [[FLTGetDuration alloc] init];
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.path ? self.path : [NSNull null]), @"path", nil];
}
@end

@implementation FLTSetVolume
+(FLTSetVolume*)fromMap:(NSDictionary*)dict {
  FLTSetVolume* result = [[FLTSetVolume alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation FLTSetPlaybackProgressInterval
+(FLTSetPlaybackProgressInterval*)fromMap:(NSDictionary*)dict {
  FLTSetPlaybackProgressInterval* result = [[FLTSetPlaybackProgressInterval alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.interval = dict[@"interval"];
  if ((NSNull *)result.interval == [NSNull null]) {
    result.interval = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.interval ? self.interval : [NSNull null]), @"interval", nil];
}
@end

@implementation FLTRequestAudioFocus
+(FLTRequestAudioFocus*)fromMap:(NSDictionary*)dict {
  FLTRequestAudioFocus* result = [[FLTRequestAudioFocus alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.audioFocus = [FLTAudioFocusProxy fromMap:dict[@"audioFocus"]];
  if ((NSNull *)result.audioFocus == [NSNull null]) {
    result.audioFocus = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.audioFocus ? [self.audioFocus toMap] : [NSNull null]), @"audioFocus", nil];
}
@end

@implementation FLTAudioFocusProxy
+(FLTAudioFocusProxy*)fromMap:(NSDictionary*)dict {
  FLTAudioFocusProxy* result = [[FLTAudioFocusProxy alloc] init];
  result.audioFocusMode = dict[@"audioFocusMode"];
  if ((NSNull *)result.audioFocusMode == [NSNull null]) {
    result.audioFocusMode = nil;
  }
  result.stopOthersNoResume = dict[@"stopOthersNoResume"];
  if ((NSNull *)result.stopOthersNoResume == [NSNull null]) {
    result.stopOthersNoResume = nil;
  }
  result.stopOthersWithResume = dict[@"stopOthersWithResume"];
  if ((NSNull *)result.stopOthersWithResume == [NSNull null]) {
    result.stopOthersWithResume = nil;
  }
  result.hushOthersWithResume = dict[@"hushOthersWithResume"];
  if ((NSNull *)result.hushOthersWithResume == [NSNull null]) {
    result.hushOthersWithResume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.audioFocusMode ? self.audioFocusMode : [NSNull null]), @"audioFocusMode", (self.stopOthersNoResume ? self.stopOthersNoResume : [NSNull null]), @"stopOthersNoResume", (self.stopOthersWithResume ? self.stopOthersWithResume : [NSNull null]), @"stopOthersWithResume", (self.hushOthersWithResume ? self.hushOthersWithResume : [NSNull null]), @"hushOthersWithResume", nil];
}
@end

@implementation FLTBoolResponse
+(FLTBoolResponse*)fromMap:(NSDictionary*)dict {
  FLTBoolResponse* result = [[FLTBoolResponse alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.errorCode = dict[@"errorCode"];
  if ((NSNull *)result.errorCode == [NSNull null]) {
    result.errorCode = nil;
  }
  result.error = dict[@"error"];
  if ((NSNull *)result.error == [NSNull null]) {
    result.error = nil;
  }
  result.boolResult = dict[@"boolResult"];
  if ((NSNull *)result.boolResult == [NSNull null]) {
    result.boolResult = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.errorCode ? self.errorCode : [NSNull null]), @"errorCode", (self.error ? self.error : [NSNull null]), @"error", (self.boolResult ? self.boolResult : [NSNull null]), @"boolResult", nil];
}
@end

@implementation FLTSoundRecorderProxy
+(FLTSoundRecorderProxy*)fromMap:(NSDictionary*)dict {
  FLTSoundRecorderProxy* result = [[FLTSoundRecorderProxy alloc] init];
  result.uuid = dict[@"uuid"];
  if ((NSNull *)result.uuid == [NSNull null]) {
    result.uuid = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uuid ? self.uuid : [NSNull null]), @"uuid", nil];
}
@end

@implementation FLTStartRecording
+(FLTStartRecording*)fromMap:(NSDictionary*)dict {
  FLTStartRecording* result = [[FLTStartRecording alloc] init];
  result.recorder = [FLTSoundRecorderProxy fromMap:dict[@"recorder"]];
  if ((NSNull *)result.recorder == [NSNull null]) {
    result.recorder = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  result.audioSource = [FLTAudioSourceProxy fromMap:dict[@"audioSource"]];
  if ((NSNull *)result.audioSource == [NSNull null]) {
    result.audioSource = nil;
  }
  result.quality = [FLTQualityProxy fromMap:dict[@"quality"]];
  if ((NSNull *)result.quality == [NSNull null]) {
    result.quality = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.recorder ? [self.recorder toMap] : [NSNull null]), @"recorder", (self.track ? [self.track toMap] : [NSNull null]), @"track", (self.audioSource ? [self.audioSource toMap] : [NSNull null]), @"audioSource", (self.quality ? [self.quality toMap] : [NSNull null]), @"quality", nil];
}
@end

@implementation FLTAudioSourceProxy
+(FLTAudioSourceProxy*)fromMap:(NSDictionary*)dict {
  FLTAudioSourceProxy* result = [[FLTAudioSourceProxy alloc] init];
  result.audioSource = dict[@"audioSource"];
  if ((NSNull *)result.audioSource == [NSNull null]) {
    result.audioSource = nil;
  }
  result.defaultSource = dict[@"defaultSource"];
  if ((NSNull *)result.defaultSource == [NSNull null]) {
    result.defaultSource = nil;
  }
  result.mic = dict[@"mic"];
  if ((NSNull *)result.mic == [NSNull null]) {
    result.mic = nil;
  }
  result.voiceUplink = dict[@"voiceUplink"];
  if ((NSNull *)result.voiceUplink == [NSNull null]) {
    result.voiceUplink = nil;
  }
  result.voiceDownlink = dict[@"voiceDownlink"];
  if ((NSNull *)result.voiceDownlink == [NSNull null]) {
    result.voiceDownlink = nil;
  }
  result.camcorder = dict[@"camcorder"];
  if ((NSNull *)result.camcorder == [NSNull null]) {
    result.camcorder = nil;
  }
  result.voiceRecognition = dict[@"voiceRecognition"];
  if ((NSNull *)result.voiceRecognition == [NSNull null]) {
    result.voiceRecognition = nil;
  }
  result.voiceCommunication = dict[@"voiceCommunication"];
  if ((NSNull *)result.voiceCommunication == [NSNull null]) {
    result.voiceCommunication = nil;
  }
  result.remoteSubmix = dict[@"remoteSubmix"];
  if ((NSNull *)result.remoteSubmix == [NSNull null]) {
    result.remoteSubmix = nil;
  }
  result.unprocessed = dict[@"unprocessed"];
  if ((NSNull *)result.unprocessed == [NSNull null]) {
    result.unprocessed = nil;
  }
  result.radioTuner = dict[@"radioTuner"];
  if ((NSNull *)result.radioTuner == [NSNull null]) {
    result.radioTuner = nil;
  }
  result.hotword = dict[@"hotword"];
  if ((NSNull *)result.hotword == [NSNull null]) {
    result.hotword = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.audioSource ? self.audioSource : [NSNull null]), @"audioSource", (self.defaultSource ? self.defaultSource : [NSNull null]), @"defaultSource", (self.mic ? self.mic : [NSNull null]), @"mic", (self.voiceUplink ? self.voiceUplink : [NSNull null]), @"voiceUplink", (self.voiceDownlink ? self.voiceDownlink : [NSNull null]), @"voiceDownlink", (self.camcorder ? self.camcorder : [NSNull null]), @"camcorder", (self.voiceRecognition ? self.voiceRecognition : [NSNull null]), @"voiceRecognition", (self.voiceCommunication ? self.voiceCommunication : [NSNull null]), @"voiceCommunication", (self.remoteSubmix ? self.remoteSubmix : [NSNull null]), @"remoteSubmix", (self.unprocessed ? self.unprocessed : [NSNull null]), @"unprocessed", (self.radioTuner ? self.radioTuner : [NSNull null]), @"radioTuner", (self.hotword ? self.hotword : [NSNull null]), @"hotword", nil];
}
@end

@implementation FLTQualityProxy
+(FLTQualityProxy*)fromMap:(NSDictionary*)dict {
  FLTQualityProxy* result = [[FLTQualityProxy alloc] init];
  result.quality = dict[@"quality"];
  if ((NSNull *)result.quality == [NSNull null]) {
    result.quality = nil;
  }
  result.min = dict[@"min"];
  if ((NSNull *)result.min == [NSNull null]) {
    result.min = nil;
  }
  result.low = dict[@"low"];
  if ((NSNull *)result.low == [NSNull null]) {
    result.low = nil;
  }
  result.medium = dict[@"medium"];
  if ((NSNull *)result.medium == [NSNull null]) {
    result.medium = nil;
  }
  result.high = dict[@"high"];
  if ((NSNull *)result.high == [NSNull null]) {
    result.high = nil;
  }
  result.max = dict[@"max"];
  if ((NSNull *)result.max == [NSNull null]) {
    result.max = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.quality ? self.quality : [NSNull null]), @"quality", (self.min ? self.min : [NSNull null]), @"min", (self.low ? self.low : [NSNull null]), @"low", (self.medium ? self.medium : [NSNull null]), @"medium", (self.high ? self.high : [NSNull null]), @"high", (self.max ? self.max : [NSNull null]), @"max", nil];
}
@end

@implementation FLTMediaFormatResponse
+(FLTMediaFormatResponse*)fromMap:(NSDictionary*)dict {
  FLTMediaFormatResponse* result = [[FLTMediaFormatResponse alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.errorCode = dict[@"errorCode"];
  if ((NSNull *)result.errorCode == [NSNull null]) {
    result.errorCode = nil;
  }
  result.error = dict[@"error"];
  if ((NSNull *)result.error == [NSNull null]) {
    result.error = nil;
  }
  result.mediaFormats = dict[@"mediaFormats"];
  if ((NSNull *)result.mediaFormats == [NSNull null]) {
    result.mediaFormats = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.errorCode ? self.errorCode : [NSNull null]), @"errorCode", (self.error ? self.error : [NSNull null]), @"error", (self.mediaFormats ? self.mediaFormats : [NSNull null]), @"mediaFormats", nil];
}
@end

@implementation FLTSetRecordingProgressInterval
+(FLTSetRecordingProgressInterval*)fromMap:(NSDictionary*)dict {
  FLTSetRecordingProgressInterval* result = [[FLTSetRecordingProgressInterval alloc] init];
  result.recorder = [FLTSoundRecorderProxy fromMap:dict[@"recorder"]];
  if ((NSNull *)result.recorder == [NSNull null]) {
    result.recorder = nil;
  }
  result.interval = dict[@"interval"];
  if ((NSNull *)result.interval == [NSNull null]) {
    result.interval = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.recorder ? [self.recorder toMap] : [NSNull null]), @"recorder", (self.interval ? self.interval : [NSNull null]), @"interval", nil];
}
@end

@implementation FLTOnPlaybackProgress
+(FLTOnPlaybackProgress*)fromMap:(NSDictionary*)dict {
  FLTOnPlaybackProgress* result = [[FLTOnPlaybackProgress alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  result.duration = dict[@"duration"];
  if ((NSNull *)result.duration == [NSNull null]) {
    result.duration = nil;
  }
  result.position = dict[@"position"];
  if ((NSNull *)result.position == [NSNull null]) {
    result.position = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.track ? [self.track toMap] : [NSNull null]), @"track", (self.duration ? self.duration : [NSNull null]), @"duration", (self.position ? self.position : [NSNull null]), @"position", nil];
}
@end

@implementation FLTOnPlaybackFinished
+(FLTOnPlaybackFinished*)fromMap:(NSDictionary*)dict {
  FLTOnPlaybackFinished* result = [[FLTOnPlaybackFinished alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.track ? [self.track toMap] : [NSNull null]), @"track", nil];
}
@end

@implementation FLTOnShadeSkipForward
+(FLTOnShadeSkipForward*)fromMap:(NSDictionary*)dict {
  FLTOnShadeSkipForward* result = [[FLTOnShadeSkipForward alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.track ? [self.track toMap] : [NSNull null]), @"track", nil];
}
@end

@implementation FLTOnShadeSkipBackward
+(FLTOnShadeSkipBackward*)fromMap:(NSDictionary*)dict {
  FLTOnShadeSkipBackward* result = [[FLTOnShadeSkipBackward alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.track ? [self.track toMap] : [NSNull null]), @"track", nil];
}
@end

@implementation FLTOnShadePaused
+(FLTOnShadePaused*)fromMap:(NSDictionary*)dict {
  FLTOnShadePaused* result = [[FLTOnShadePaused alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.track ? [self.track toMap] : [NSNull null]), @"track", nil];
}
@end

@implementation FLTOnShadeResumed
+(FLTOnShadeResumed*)fromMap:(NSDictionary*)dict {
  FLTOnShadeResumed* result = [[FLTOnShadeResumed alloc] init];
  result.player = [FLTSoundPlayerProxy fromMap:dict[@"player"]];
  if ((NSNull *)result.player == [NSNull null]) {
    result.player = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.player ? [self.player toMap] : [NSNull null]), @"player", (self.track ? [self.track toMap] : [NSNull null]), @"track", nil];
}
@end

@implementation FLTOnRecordingProgress
+(FLTOnRecordingProgress*)fromMap:(NSDictionary*)dict {
  FLTOnRecordingProgress* result = [[FLTOnRecordingProgress alloc] init];
  result.recorder = [FLTSoundRecorderProxy fromMap:dict[@"recorder"]];
  if ((NSNull *)result.recorder == [NSNull null]) {
    result.recorder = nil;
  }
  result.track = [FLTTrackProxy fromMap:dict[@"track"]];
  if ((NSNull *)result.track == [NSNull null]) {
    result.track = nil;
  }
  result.decibels = dict[@"decibels"];
  if ((NSNull *)result.decibels == [NSNull null]) {
    result.decibels = nil;
  }
  result.duration = dict[@"duration"];
  if ((NSNull *)result.duration == [NSNull null]) {
    result.duration = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.recorder ? [self.recorder toMap] : [NSNull null]), @"recorder", (self.track ? [self.track toMap] : [NSNull null]), @"track", (self.decibels ? self.decibels : [NSNull null]), @"decibels", (self.duration ? self.duration : [NSNull null]), @"duration", nil];
}
@end

@implementation FLTOnError
+(FLTOnError*)fromMap:(NSDictionary*)dict {
  FLTOnError* result = [[FLTOnError alloc] init];
  result.errorCode = dict[@"errorCode"];
  if ((NSNull *)result.errorCode == [NSNull null]) {
    result.errorCode = nil;
  }
  result.error = dict[@"error"];
  if ((NSNull *)result.error == [NSNull null]) {
    result.error = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.errorCode ? self.errorCode : [NSNull null]), @"errorCode", (self.error ? self.error : [NSNull null]), @"error", nil];
}
@end

void FLTSoundsToPlatformApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTSoundsToPlatformApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.initializePlayer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTInitializePlayer *input = [FLTInitializePlayer fromMap:message];
        FLTResponse *output = [api initializePlayer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.initializePlayerWithShade"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTInitializePlayerWithShade *input = [FLTInitializePlayerWithShade fromMap:message];
        FLTResponse *output = [api initializePlayerWithShade:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.releasePlayer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundPlayerProxy *input = [FLTSoundPlayerProxy fromMap:message];
        FLTResponse *output = [api releasePlayer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.startPlayer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTStartPlayer *input = [FLTStartPlayer fromMap:message];
        FLTResponse *output = [api startPlayer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.stopPlayer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundPlayerProxy *input = [FLTSoundPlayerProxy fromMap:message];
        FLTResponse *output = [api stopPlayer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.pausePlayer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundPlayerProxy *input = [FLTSoundPlayerProxy fromMap:message];
        FLTResponse *output = [api pausePlayer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.resumePlayer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundPlayerProxy *input = [FLTSoundPlayerProxy fromMap:message];
        FLTResponse *output = [api resumePlayer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.seekToPlayer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSeekToPlayer *input = [FLTSeekToPlayer fromMap:message];
        FLTResponse *output = [api seekToPlayer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.getDuration"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTGetDuration *input = [FLTGetDuration fromMap:message];
        FLTDurationResponse *output = [api getDuration:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.setVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetVolume *input = [FLTSetVolume fromMap:message];
        FLTResponse *output = [api setVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.setPlaybackProgressInterval"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetPlaybackProgressInterval *input = [FLTSetPlaybackProgressInterval fromMap:message];
        FLTResponse *output = [api setPlaybackProgressInterval:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.requestAudioFocus"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTRequestAudioFocus *input = [FLTRequestAudioFocus fromMap:message];
        FLTResponse *output = [api requestAudioFocus:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.releaseAudioFocus"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundPlayerProxy *input = [FLTSoundPlayerProxy fromMap:message];
        FLTResponse *output = [api releaseAudioFocus:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.isShadeSupported"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolResponse *output = [api isShadeSupported:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.isShadePauseSupported"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolResponse *output = [api isShadePauseSupported:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.isShadeSkipForwardSupported"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolResponse *output = [api isShadeSkipForwardSupported:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.isShadeSkipBackwardsSupported"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolResponse *output = [api isShadeSkipBackwardsSupported:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.isBackgroundPlaybackSupported"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBoolResponse *output = [api isBackgroundPlaybackSupported:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.initializeRecorder"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundRecorderProxy *input = [FLTSoundRecorderProxy fromMap:message];
        FLTResponse *output = [api initializeRecorder:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.releaseRecorder"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundRecorderProxy *input = [FLTSoundRecorderProxy fromMap:message];
        FLTResponse *output = [api releaseRecorder:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.startRecording"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTStartRecording *input = [FLTStartRecording fromMap:message];
        FLTResponse *output = [api startRecording:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.stopRecording"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundRecorderProxy *input = [FLTSoundRecorderProxy fromMap:message];
        FLTResponse *output = [api stopRecording:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.pauseRecording"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundRecorderProxy *input = [FLTSoundRecorderProxy fromMap:message];
        FLTResponse *output = [api pauseRecording:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.resumeRecording"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSoundRecorderProxy *input = [FLTSoundRecorderProxy fromMap:message];
        FLTResponse *output = [api resumeRecording:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.getNativeEncoderFormats"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTMediaFormatProxy *input = [FLTMediaFormatProxy fromMap:message];
        FLTMediaFormatResponse *output = [api getNativeEncoderFormats:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.getNativeDecoderFormats"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTMediaFormatProxy *input = [FLTMediaFormatProxy fromMap:message];
        FLTMediaFormatResponse *output = [api getNativeDecoderFormats:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.SoundsToPlatformApi.setRecordingProgressInterval"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSetRecordingProgressInterval *input = [FLTSetRecordingProgressInterval fromMap:message];
        FLTResponse *output = [api setRecordingProgressInterval:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTSoundsFromPlatformApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation FLTSoundsFromPlatformApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    self.binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onPlaybackProgress:(FLTOnPlaybackProgress*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onPlaybackProgress"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPlaybackFinished:(FLTOnPlaybackFinished*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onPlaybackFinished"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onShadeSkipForward:(FLTOnShadeSkipForward*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onShadeSkipForward"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onShadeSkipBackward:(FLTOnShadeSkipBackward*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onShadeSkipBackward"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onShadePaused:(FLTOnShadePaused*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onShadePaused"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onShadeResumed:(FLTOnShadeResumed*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onShadeResumed"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onRecordingProgress:(FLTOnRecordingProgress*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onRecordingProgress"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onError:(FLTOnError*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.SoundsFromPlatformApi.onError"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end

// Autogenerated from Pigeon (v0.1.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.bsutton.sounds;

import java.util.ArrayList;
import java.util.HashMap;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class SoundsPlatformApi {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Response {
    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    private Long errorCode;
    public Long getErrorCode() { return errorCode; }
    public void setErrorCode(Long setterArg) { this.errorCode = setterArg; }

    private String error;
    public String getError() { return error; }
    public void setError(String setterArg) { this.error = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("errorCode", errorCode);
      toMapResult.put("error", error);
      return toMapResult;
    }
    static Response fromMap(HashMap map) {
      Response fromMapResult = new Response();
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      Object errorCode = map.get("errorCode");
      fromMapResult.errorCode = (errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode);
      Object error = map.get("error");
      fromMapResult.error = (String)error;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitializePlayer {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private Boolean playInBackground;
    public Boolean getPlayInBackground() { return playInBackground; }
    public void setPlayInBackground(Boolean setterArg) { this.playInBackground = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("playInBackground", playInBackground);
      return toMapResult;
    }
    static InitializePlayer fromMap(HashMap map) {
      InitializePlayer fromMapResult = new InitializePlayer();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object playInBackground = map.get("playInBackground");
      fromMapResult.playInBackground = (Boolean)playInBackground;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SoundPlayerProxy {
    private String uuid;
    public String getUuid() { return uuid; }
    public void setUuid(String setterArg) { this.uuid = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uuid", uuid);
      return toMapResult;
    }
    static SoundPlayerProxy fromMap(HashMap map) {
      SoundPlayerProxy fromMapResult = new SoundPlayerProxy();
      Object uuid = map.get("uuid");
      fromMapResult.uuid = (String)uuid;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitializePlayerWithShade {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private Boolean playInBackground;
    public Boolean getPlayInBackground() { return playInBackground; }
    public void setPlayInBackground(Boolean setterArg) { this.playInBackground = setterArg; }

    private Boolean canPause;
    public Boolean getCanPause() { return canPause; }
    public void setCanPause(Boolean setterArg) { this.canPause = setterArg; }

    private Boolean canSkipBackward;
    public Boolean getCanSkipBackward() { return canSkipBackward; }
    public void setCanSkipBackward(Boolean setterArg) { this.canSkipBackward = setterArg; }

    private Boolean canSkipForward;
    public Boolean getCanSkipForward() { return canSkipForward; }
    public void setCanSkipForward(Boolean setterArg) { this.canSkipForward = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("playInBackground", playInBackground);
      toMapResult.put("canPause", canPause);
      toMapResult.put("canSkipBackward", canSkipBackward);
      toMapResult.put("canSkipForward", canSkipForward);
      return toMapResult;
    }
    static InitializePlayerWithShade fromMap(HashMap map) {
      InitializePlayerWithShade fromMapResult = new InitializePlayerWithShade();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object playInBackground = map.get("playInBackground");
      fromMapResult.playInBackground = (Boolean)playInBackground;
      Object canPause = map.get("canPause");
      fromMapResult.canPause = (Boolean)canPause;
      Object canSkipBackward = map.get("canSkipBackward");
      fromMapResult.canSkipBackward = (Boolean)canSkipBackward;
      Object canSkipForward = map.get("canSkipForward");
      fromMapResult.canSkipForward = (Boolean)canSkipForward;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartPlayer {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    private Long startAt;
    public Long getStartAt() { return startAt; }
    public void setStartAt(Long setterArg) { this.startAt = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("track", track.toMap());
      toMapResult.put("startAt", startAt);
      return toMapResult;
    }
    static StartPlayer fromMap(HashMap map) {
      StartPlayer fromMapResult = new StartPlayer();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      Object startAt = map.get("startAt");
      fromMapResult.startAt = (startAt == null) ? null : ((startAt instanceof Integer) ? (Integer)startAt : (Long)startAt);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TrackProxy {
    private String uuid;
    public String getUuid() { return uuid; }
    public void setUuid(String setterArg) { this.uuid = setterArg; }

    private String path;
    public String getPath() { return path; }
    public void setPath(String setterArg) { this.path = setterArg; }

    private MediaFormatProxy mediaFormat;
    public MediaFormatProxy getMediaFormat() { return mediaFormat; }
    public void setMediaFormat(MediaFormatProxy setterArg) { this.mediaFormat = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String artist;
    public String getArtist() { return artist; }
    public void setArtist(String setterArg) { this.artist = setterArg; }

    private String album;
    public String getAlbum() { return album; }
    public void setAlbum(String setterArg) { this.album = setterArg; }

    private String albumArtUrl;
    public String getAlbumArtUrl() { return albumArtUrl; }
    public void setAlbumArtUrl(String setterArg) { this.albumArtUrl = setterArg; }

    private String albumArtAsset;
    public String getAlbumArtAsset() { return albumArtAsset; }
    public void setAlbumArtAsset(String setterArg) { this.albumArtAsset = setterArg; }

    private String albumArtFile;
    public String getAlbumArtFile() { return albumArtFile; }
    public void setAlbumArtFile(String setterArg) { this.albumArtFile = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uuid", uuid);
      toMapResult.put("path", path);
      toMapResult.put("mediaFormat", mediaFormat.toMap());
      toMapResult.put("title", title);
      toMapResult.put("artist", artist);
      toMapResult.put("album", album);
      toMapResult.put("albumArtUrl", albumArtUrl);
      toMapResult.put("albumArtAsset", albumArtAsset);
      toMapResult.put("albumArtFile", albumArtFile);
      return toMapResult;
    }
    static TrackProxy fromMap(HashMap map) {
      TrackProxy fromMapResult = new TrackProxy();
      Object uuid = map.get("uuid");
      fromMapResult.uuid = (String)uuid;
      Object path = map.get("path");
      fromMapResult.path = (String)path;
      Object mediaFormat = map.get("mediaFormat");
      fromMapResult.mediaFormat = MediaFormatProxy.fromMap((HashMap)mediaFormat);
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object artist = map.get("artist");
      fromMapResult.artist = (String)artist;
      Object album = map.get("album");
      fromMapResult.album = (String)album;
      Object albumArtUrl = map.get("albumArtUrl");
      fromMapResult.albumArtUrl = (String)albumArtUrl;
      Object albumArtAsset = map.get("albumArtAsset");
      fromMapResult.albumArtAsset = (String)albumArtAsset;
      Object albumArtFile = map.get("albumArtFile");
      fromMapResult.albumArtFile = (String)albumArtFile;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaFormatProxy {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private Long sampleRate;
    public Long getSampleRate() { return sampleRate; }
    public void setSampleRate(Long setterArg) { this.sampleRate = setterArg; }

    private Long numChannels;
    public Long getNumChannels() { return numChannels; }
    public void setNumChannels(Long setterArg) { this.numChannels = setterArg; }

    private Long bitRate;
    public Long getBitRate() { return bitRate; }
    public void setBitRate(Long setterArg) { this.bitRate = setterArg; }

    private String adtsAac;
    public String getAdtsAac() { return adtsAac; }
    public void setAdtsAac(String setterArg) { this.adtsAac = setterArg; }

    private String capOpus;
    public String getCapOpus() { return capOpus; }
    public void setCapOpus(String setterArg) { this.capOpus = setterArg; }

    private String mp3;
    public String getMp3() { return mp3; }
    public void setMp3(String setterArg) { this.mp3 = setterArg; }

    private String oggOpus;
    public String getOggOpus() { return oggOpus; }
    public void setOggOpus(String setterArg) { this.oggOpus = setterArg; }

    private String oggVorbis;
    public String getOggVorbis() { return oggVorbis; }
    public void setOggVorbis(String setterArg) { this.oggVorbis = setterArg; }

    private String pcm;
    public String getPcm() { return pcm; }
    public void setPcm(String setterArg) { this.pcm = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("sampleRate", sampleRate);
      toMapResult.put("numChannels", numChannels);
      toMapResult.put("bitRate", bitRate);
      toMapResult.put("adtsAac", adtsAac);
      toMapResult.put("capOpus", capOpus);
      toMapResult.put("mp3", mp3);
      toMapResult.put("oggOpus", oggOpus);
      toMapResult.put("oggVorbis", oggVorbis);
      toMapResult.put("pcm", pcm);
      return toMapResult;
    }
    static MediaFormatProxy fromMap(HashMap map) {
      MediaFormatProxy fromMapResult = new MediaFormatProxy();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object sampleRate = map.get("sampleRate");
      fromMapResult.sampleRate = (sampleRate == null) ? null : ((sampleRate instanceof Integer) ? (Integer)sampleRate : (Long)sampleRate);
      Object numChannels = map.get("numChannels");
      fromMapResult.numChannels = (numChannels == null) ? null : ((numChannels instanceof Integer) ? (Integer)numChannels : (Long)numChannels);
      Object bitRate = map.get("bitRate");
      fromMapResult.bitRate = (bitRate == null) ? null : ((bitRate instanceof Integer) ? (Integer)bitRate : (Long)bitRate);
      Object adtsAac = map.get("adtsAac");
      fromMapResult.adtsAac = (String)adtsAac;
      Object capOpus = map.get("capOpus");
      fromMapResult.capOpus = (String)capOpus;
      Object mp3 = map.get("mp3");
      fromMapResult.mp3 = (String)mp3;
      Object oggOpus = map.get("oggOpus");
      fromMapResult.oggOpus = (String)oggOpus;
      Object oggVorbis = map.get("oggVorbis");
      fromMapResult.oggVorbis = (String)oggVorbis;
      Object pcm = map.get("pcm");
      fromMapResult.pcm = (String)pcm;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SeekToPlayer {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private Long milliseconds;
    public Long getMilliseconds() { return milliseconds; }
    public void setMilliseconds(Long setterArg) { this.milliseconds = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("milliseconds", milliseconds);
      return toMapResult;
    }
    static SeekToPlayer fromMap(HashMap map) {
      SeekToPlayer fromMapResult = new SeekToPlayer();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object milliseconds = map.get("milliseconds");
      fromMapResult.milliseconds = (milliseconds == null) ? null : ((milliseconds instanceof Integer) ? (Integer)milliseconds : (Long)milliseconds);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DurationResponse {
    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    private Long errorCode;
    public Long getErrorCode() { return errorCode; }
    public void setErrorCode(Long setterArg) { this.errorCode = setterArg; }

    private String error;
    public String getError() { return error; }
    public void setError(String setterArg) { this.error = setterArg; }

    private Long duration;
    public Long getDuration() { return duration; }
    public void setDuration(Long setterArg) { this.duration = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("errorCode", errorCode);
      toMapResult.put("error", error);
      toMapResult.put("duration", duration);
      return toMapResult;
    }
    static DurationResponse fromMap(HashMap map) {
      DurationResponse fromMapResult = new DurationResponse();
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      Object errorCode = map.get("errorCode");
      fromMapResult.errorCode = (errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode);
      Object error = map.get("error");
      fromMapResult.error = (String)error;
      Object duration = map.get("duration");
      fromMapResult.duration = (duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetDuration {
    private String path;
    public String getPath() { return path; }
    public void setPath(String setterArg) { this.path = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("path", path);
      return toMapResult;
    }
    static GetDuration fromMap(HashMap map) {
      GetDuration fromMapResult = new GetDuration();
      Object path = map.get("path");
      fromMapResult.path = (String)path;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetVolume {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private Long volume;
    public Long getVolume() { return volume; }
    public void setVolume(Long setterArg) { this.volume = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("volume", volume);
      return toMapResult;
    }
    static SetVolume fromMap(HashMap map) {
      SetVolume fromMapResult = new SetVolume();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object volume = map.get("volume");
      fromMapResult.volume = (volume == null) ? null : ((volume instanceof Integer) ? (Integer)volume : (Long)volume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetPlaybackProgressInterval {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private Long interval;
    public Long getInterval() { return interval; }
    public void setInterval(Long setterArg) { this.interval = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("interval", interval);
      return toMapResult;
    }
    static SetPlaybackProgressInterval fromMap(HashMap map) {
      SetPlaybackProgressInterval fromMapResult = new SetPlaybackProgressInterval();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object interval = map.get("interval");
      fromMapResult.interval = (interval == null) ? null : ((interval instanceof Integer) ? (Integer)interval : (Long)interval);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RequestAudioFocus {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private AudioFocusProxy audioFocus;
    public AudioFocusProxy getAudioFocus() { return audioFocus; }
    public void setAudioFocus(AudioFocusProxy setterArg) { this.audioFocus = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("audioFocus", audioFocus.toMap());
      return toMapResult;
    }
    static RequestAudioFocus fromMap(HashMap map) {
      RequestAudioFocus fromMapResult = new RequestAudioFocus();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object audioFocus = map.get("audioFocus");
      fromMapResult.audioFocus = AudioFocusProxy.fromMap((HashMap)audioFocus);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AudioFocusProxy {
    private Long audioFocusMode;
    public Long getAudioFocusMode() { return audioFocusMode; }
    public void setAudioFocusMode(Long setterArg) { this.audioFocusMode = setterArg; }

    private Long stopOthersNoResume;
    public Long getStopOthersNoResume() { return stopOthersNoResume; }
    public void setStopOthersNoResume(Long setterArg) { this.stopOthersNoResume = setterArg; }

    private Long stopOthersWithResume;
    public Long getStopOthersWithResume() { return stopOthersWithResume; }
    public void setStopOthersWithResume(Long setterArg) { this.stopOthersWithResume = setterArg; }

    private Long hushOthersWithResume;
    public Long getHushOthersWithResume() { return hushOthersWithResume; }
    public void setHushOthersWithResume(Long setterArg) { this.hushOthersWithResume = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("audioFocusMode", audioFocusMode);
      toMapResult.put("stopOthersNoResume", stopOthersNoResume);
      toMapResult.put("stopOthersWithResume", stopOthersWithResume);
      toMapResult.put("hushOthersWithResume", hushOthersWithResume);
      return toMapResult;
    }
    static AudioFocusProxy fromMap(HashMap map) {
      AudioFocusProxy fromMapResult = new AudioFocusProxy();
      Object audioFocusMode = map.get("audioFocusMode");
      fromMapResult.audioFocusMode = (audioFocusMode == null) ? null : ((audioFocusMode instanceof Integer) ? (Integer)audioFocusMode : (Long)audioFocusMode);
      Object stopOthersNoResume = map.get("stopOthersNoResume");
      fromMapResult.stopOthersNoResume = (stopOthersNoResume == null) ? null : ((stopOthersNoResume instanceof Integer) ? (Integer)stopOthersNoResume : (Long)stopOthersNoResume);
      Object stopOthersWithResume = map.get("stopOthersWithResume");
      fromMapResult.stopOthersWithResume = (stopOthersWithResume == null) ? null : ((stopOthersWithResume instanceof Integer) ? (Integer)stopOthersWithResume : (Long)stopOthersWithResume);
      Object hushOthersWithResume = map.get("hushOthersWithResume");
      fromMapResult.hushOthersWithResume = (hushOthersWithResume == null) ? null : ((hushOthersWithResume instanceof Integer) ? (Integer)hushOthersWithResume : (Long)hushOthersWithResume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BoolResponse {
    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    private Long errorCode;
    public Long getErrorCode() { return errorCode; }
    public void setErrorCode(Long setterArg) { this.errorCode = setterArg; }

    private String error;
    public String getError() { return error; }
    public void setError(String setterArg) { this.error = setterArg; }

    private Boolean boolResult;
    public Boolean getBoolResult() { return boolResult; }
    public void setBoolResult(Boolean setterArg) { this.boolResult = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("errorCode", errorCode);
      toMapResult.put("error", error);
      toMapResult.put("boolResult", boolResult);
      return toMapResult;
    }
    static BoolResponse fromMap(HashMap map) {
      BoolResponse fromMapResult = new BoolResponse();
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      Object errorCode = map.get("errorCode");
      fromMapResult.errorCode = (errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode);
      Object error = map.get("error");
      fromMapResult.error = (String)error;
      Object boolResult = map.get("boolResult");
      fromMapResult.boolResult = (Boolean)boolResult;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SoundRecorderProxy {
    private String uuid;
    public String getUuid() { return uuid; }
    public void setUuid(String setterArg) { this.uuid = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uuid", uuid);
      return toMapResult;
    }
    static SoundRecorderProxy fromMap(HashMap map) {
      SoundRecorderProxy fromMapResult = new SoundRecorderProxy();
      Object uuid = map.get("uuid");
      fromMapResult.uuid = (String)uuid;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartRecording {
    private SoundRecorderProxy recorder;
    public SoundRecorderProxy getRecorder() { return recorder; }
    public void setRecorder(SoundRecorderProxy setterArg) { this.recorder = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    private AudioSourceProxy audioSource;
    public AudioSourceProxy getAudioSource() { return audioSource; }
    public void setAudioSource(AudioSourceProxy setterArg) { this.audioSource = setterArg; }

    private QualityProxy quality;
    public QualityProxy getQuality() { return quality; }
    public void setQuality(QualityProxy setterArg) { this.quality = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("recorder", recorder.toMap());
      toMapResult.put("track", track.toMap());
      toMapResult.put("audioSource", audioSource.toMap());
      toMapResult.put("quality", quality.toMap());
      return toMapResult;
    }
    static StartRecording fromMap(HashMap map) {
      StartRecording fromMapResult = new StartRecording();
      Object recorder = map.get("recorder");
      fromMapResult.recorder = SoundRecorderProxy.fromMap((HashMap)recorder);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      Object audioSource = map.get("audioSource");
      fromMapResult.audioSource = AudioSourceProxy.fromMap((HashMap)audioSource);
      Object quality = map.get("quality");
      fromMapResult.quality = QualityProxy.fromMap((HashMap)quality);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AudioSourceProxy {
    private Long audioSource;
    public Long getAudioSource() { return audioSource; }
    public void setAudioSource(Long setterArg) { this.audioSource = setterArg; }

    private Long defaultSource;
    public Long getDefaultSource() { return defaultSource; }
    public void setDefaultSource(Long setterArg) { this.defaultSource = setterArg; }

    private Long mic;
    public Long getMic() { return mic; }
    public void setMic(Long setterArg) { this.mic = setterArg; }

    private Long voiceUplink;
    public Long getVoiceUplink() { return voiceUplink; }
    public void setVoiceUplink(Long setterArg) { this.voiceUplink = setterArg; }

    private Long voiceDownlink;
    public Long getVoiceDownlink() { return voiceDownlink; }
    public void setVoiceDownlink(Long setterArg) { this.voiceDownlink = setterArg; }

    private Long camcorder;
    public Long getCamcorder() { return camcorder; }
    public void setCamcorder(Long setterArg) { this.camcorder = setterArg; }

    private Long voiceRecognition;
    public Long getVoiceRecognition() { return voiceRecognition; }
    public void setVoiceRecognition(Long setterArg) { this.voiceRecognition = setterArg; }

    private Long voiceCommunication;
    public Long getVoiceCommunication() { return voiceCommunication; }
    public void setVoiceCommunication(Long setterArg) { this.voiceCommunication = setterArg; }

    private Long remoteSubmix;
    public Long getRemoteSubmix() { return remoteSubmix; }
    public void setRemoteSubmix(Long setterArg) { this.remoteSubmix = setterArg; }

    private Long unprocessed;
    public Long getUnprocessed() { return unprocessed; }
    public void setUnprocessed(Long setterArg) { this.unprocessed = setterArg; }

    private Long radioTuner;
    public Long getRadioTuner() { return radioTuner; }
    public void setRadioTuner(Long setterArg) { this.radioTuner = setterArg; }

    private Long hotword;
    public Long getHotword() { return hotword; }
    public void setHotword(Long setterArg) { this.hotword = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("audioSource", audioSource);
      toMapResult.put("defaultSource", defaultSource);
      toMapResult.put("mic", mic);
      toMapResult.put("voiceUplink", voiceUplink);
      toMapResult.put("voiceDownlink", voiceDownlink);
      toMapResult.put("camcorder", camcorder);
      toMapResult.put("voiceRecognition", voiceRecognition);
      toMapResult.put("voiceCommunication", voiceCommunication);
      toMapResult.put("remoteSubmix", remoteSubmix);
      toMapResult.put("unprocessed", unprocessed);
      toMapResult.put("radioTuner", radioTuner);
      toMapResult.put("hotword", hotword);
      return toMapResult;
    }
    static AudioSourceProxy fromMap(HashMap map) {
      AudioSourceProxy fromMapResult = new AudioSourceProxy();
      Object audioSource = map.get("audioSource");
      fromMapResult.audioSource = (audioSource == null) ? null : ((audioSource instanceof Integer) ? (Integer)audioSource : (Long)audioSource);
      Object defaultSource = map.get("defaultSource");
      fromMapResult.defaultSource = (defaultSource == null) ? null : ((defaultSource instanceof Integer) ? (Integer)defaultSource : (Long)defaultSource);
      Object mic = map.get("mic");
      fromMapResult.mic = (mic == null) ? null : ((mic instanceof Integer) ? (Integer)mic : (Long)mic);
      Object voiceUplink = map.get("voiceUplink");
      fromMapResult.voiceUplink = (voiceUplink == null) ? null : ((voiceUplink instanceof Integer) ? (Integer)voiceUplink : (Long)voiceUplink);
      Object voiceDownlink = map.get("voiceDownlink");
      fromMapResult.voiceDownlink = (voiceDownlink == null) ? null : ((voiceDownlink instanceof Integer) ? (Integer)voiceDownlink : (Long)voiceDownlink);
      Object camcorder = map.get("camcorder");
      fromMapResult.camcorder = (camcorder == null) ? null : ((camcorder instanceof Integer) ? (Integer)camcorder : (Long)camcorder);
      Object voiceRecognition = map.get("voiceRecognition");
      fromMapResult.voiceRecognition = (voiceRecognition == null) ? null : ((voiceRecognition instanceof Integer) ? (Integer)voiceRecognition : (Long)voiceRecognition);
      Object voiceCommunication = map.get("voiceCommunication");
      fromMapResult.voiceCommunication = (voiceCommunication == null) ? null : ((voiceCommunication instanceof Integer) ? (Integer)voiceCommunication : (Long)voiceCommunication);
      Object remoteSubmix = map.get("remoteSubmix");
      fromMapResult.remoteSubmix = (remoteSubmix == null) ? null : ((remoteSubmix instanceof Integer) ? (Integer)remoteSubmix : (Long)remoteSubmix);
      Object unprocessed = map.get("unprocessed");
      fromMapResult.unprocessed = (unprocessed == null) ? null : ((unprocessed instanceof Integer) ? (Integer)unprocessed : (Long)unprocessed);
      Object radioTuner = map.get("radioTuner");
      fromMapResult.radioTuner = (radioTuner == null) ? null : ((radioTuner instanceof Integer) ? (Integer)radioTuner : (Long)radioTuner);
      Object hotword = map.get("hotword");
      fromMapResult.hotword = (hotword == null) ? null : ((hotword instanceof Integer) ? (Integer)hotword : (Long)hotword);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QualityProxy {
    private Long quality;
    public Long getQuality() { return quality; }
    public void setQuality(Long setterArg) { this.quality = setterArg; }

    private Long min;
    public Long getMin() { return min; }
    public void setMin(Long setterArg) { this.min = setterArg; }

    private Long low;
    public Long getLow() { return low; }
    public void setLow(Long setterArg) { this.low = setterArg; }

    private Long medium;
    public Long getMedium() { return medium; }
    public void setMedium(Long setterArg) { this.medium = setterArg; }

    private Long high;
    public Long getHigh() { return high; }
    public void setHigh(Long setterArg) { this.high = setterArg; }

    private Long max;
    public Long getMax() { return max; }
    public void setMax(Long setterArg) { this.max = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("quality", quality);
      toMapResult.put("min", min);
      toMapResult.put("low", low);
      toMapResult.put("medium", medium);
      toMapResult.put("high", high);
      toMapResult.put("max", max);
      return toMapResult;
    }
    static QualityProxy fromMap(HashMap map) {
      QualityProxy fromMapResult = new QualityProxy();
      Object quality = map.get("quality");
      fromMapResult.quality = (quality == null) ? null : ((quality instanceof Integer) ? (Integer)quality : (Long)quality);
      Object min = map.get("min");
      fromMapResult.min = (min == null) ? null : ((min instanceof Integer) ? (Integer)min : (Long)min);
      Object low = map.get("low");
      fromMapResult.low = (low == null) ? null : ((low instanceof Integer) ? (Integer)low : (Long)low);
      Object medium = map.get("medium");
      fromMapResult.medium = (medium == null) ? null : ((medium instanceof Integer) ? (Integer)medium : (Long)medium);
      Object high = map.get("high");
      fromMapResult.high = (high == null) ? null : ((high instanceof Integer) ? (Integer)high : (Long)high);
      Object max = map.get("max");
      fromMapResult.max = (max == null) ? null : ((max instanceof Integer) ? (Integer)max : (Long)max);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaFormatResponse {
    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    private Long errorCode;
    public Long getErrorCode() { return errorCode; }
    public void setErrorCode(Long setterArg) { this.errorCode = setterArg; }

    private String error;
    public String getError() { return error; }
    public void setError(String setterArg) { this.error = setterArg; }

    private ArrayList mediaFormats;
    public ArrayList getMediaFormats() { return mediaFormats; }
    public void setMediaFormats(ArrayList setterArg) { this.mediaFormats = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("errorCode", errorCode);
      toMapResult.put("error", error);
      toMapResult.put("mediaFormats", mediaFormats);
      return toMapResult;
    }
    static MediaFormatResponse fromMap(HashMap map) {
      MediaFormatResponse fromMapResult = new MediaFormatResponse();
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      Object errorCode = map.get("errorCode");
      fromMapResult.errorCode = (errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode);
      Object error = map.get("error");
      fromMapResult.error = (String)error;
      Object mediaFormats = map.get("mediaFormats");
      fromMapResult.mediaFormats = (ArrayList)mediaFormats;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetRecordingProgressInterval {
    private SoundRecorderProxy recorder;
    public SoundRecorderProxy getRecorder() { return recorder; }
    public void setRecorder(SoundRecorderProxy setterArg) { this.recorder = setterArg; }

    private Long interval;
    public Long getInterval() { return interval; }
    public void setInterval(Long setterArg) { this.interval = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("recorder", recorder.toMap());
      toMapResult.put("interval", interval);
      return toMapResult;
    }
    static SetRecordingProgressInterval fromMap(HashMap map) {
      SetRecordingProgressInterval fromMapResult = new SetRecordingProgressInterval();
      Object recorder = map.get("recorder");
      fromMapResult.recorder = SoundRecorderProxy.fromMap((HashMap)recorder);
      Object interval = map.get("interval");
      fromMapResult.interval = (interval == null) ? null : ((interval instanceof Integer) ? (Integer)interval : (Long)interval);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnPlaybackProgress {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    private Long duration;
    public Long getDuration() { return duration; }
    public void setDuration(Long setterArg) { this.duration = setterArg; }

    private Long position;
    public Long getPosition() { return position; }
    public void setPosition(Long setterArg) { this.position = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("track", track.toMap());
      toMapResult.put("duration", duration);
      toMapResult.put("position", position);
      return toMapResult;
    }
    static OnPlaybackProgress fromMap(HashMap map) {
      OnPlaybackProgress fromMapResult = new OnPlaybackProgress();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      Object duration = map.get("duration");
      fromMapResult.duration = (duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration);
      Object position = map.get("position");
      fromMapResult.position = (position == null) ? null : ((position instanceof Integer) ? (Integer)position : (Long)position);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnPlaybackFinished {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("track", track.toMap());
      return toMapResult;
    }
    static OnPlaybackFinished fromMap(HashMap map) {
      OnPlaybackFinished fromMapResult = new OnPlaybackFinished();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnShadeSkipForward {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("track", track.toMap());
      return toMapResult;
    }
    static OnShadeSkipForward fromMap(HashMap map) {
      OnShadeSkipForward fromMapResult = new OnShadeSkipForward();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnShadeSkipBackward {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("track", track.toMap());
      return toMapResult;
    }
    static OnShadeSkipBackward fromMap(HashMap map) {
      OnShadeSkipBackward fromMapResult = new OnShadeSkipBackward();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnShadePaused {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("track", track.toMap());
      return toMapResult;
    }
    static OnShadePaused fromMap(HashMap map) {
      OnShadePaused fromMapResult = new OnShadePaused();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnShadeResumed {
    private SoundPlayerProxy player;
    public SoundPlayerProxy getPlayer() { return player; }
    public void setPlayer(SoundPlayerProxy setterArg) { this.player = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("player", player.toMap());
      toMapResult.put("track", track.toMap());
      return toMapResult;
    }
    static OnShadeResumed fromMap(HashMap map) {
      OnShadeResumed fromMapResult = new OnShadeResumed();
      Object player = map.get("player");
      fromMapResult.player = SoundPlayerProxy.fromMap((HashMap)player);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnRecordingProgress {
    private SoundRecorderProxy recorder;
    public SoundRecorderProxy getRecorder() { return recorder; }
    public void setRecorder(SoundRecorderProxy setterArg) { this.recorder = setterArg; }

    private TrackProxy track;
    public TrackProxy getTrack() { return track; }
    public void setTrack(TrackProxy setterArg) { this.track = setterArg; }

    private Double decibels;
    public Double getDecibels() { return decibels; }
    public void setDecibels(Double setterArg) { this.decibels = setterArg; }

    private Long duration;
    public Long getDuration() { return duration; }
    public void setDuration(Long setterArg) { this.duration = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("recorder", recorder.toMap());
      toMapResult.put("track", track.toMap());
      toMapResult.put("decibels", decibels);
      toMapResult.put("duration", duration);
      return toMapResult;
    }
    static OnRecordingProgress fromMap(HashMap map) {
      OnRecordingProgress fromMapResult = new OnRecordingProgress();
      Object recorder = map.get("recorder");
      fromMapResult.recorder = SoundRecorderProxy.fromMap((HashMap)recorder);
      Object track = map.get("track");
      fromMapResult.track = TrackProxy.fromMap((HashMap)track);
      Object decibels = map.get("decibels");
      fromMapResult.decibels = (Double)decibels;
      Object duration = map.get("duration");
      fromMapResult.duration = (duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OnError {
    private Long errorCode;
    public Long getErrorCode() { return errorCode; }
    public void setErrorCode(Long setterArg) { this.errorCode = setterArg; }

    private String error;
    public String getError() { return error; }
    public void setError(String setterArg) { this.error = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("errorCode", errorCode);
      toMapResult.put("error", error);
      return toMapResult;
    }
    static OnError fromMap(HashMap map) {
      OnError fromMapResult = new OnError();
      Object errorCode = map.get("errorCode");
      fromMapResult.errorCode = (errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode);
      Object error = map.get("error");
      fromMapResult.error = (String)error;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface SoundsToPlatformApi {
    Response initializePlayer(InitializePlayer arg);
    Response initializePlayerWithShade(InitializePlayerWithShade arg);
    Response releasePlayer(SoundPlayerProxy arg);
    Response startPlayer(StartPlayer arg);
    Response stopPlayer(SoundPlayerProxy arg);
    Response pausePlayer(SoundPlayerProxy arg);
    Response resumePlayer(SoundPlayerProxy arg);
    Response seekToPlayer(SeekToPlayer arg);
    DurationResponse getDuration(GetDuration arg);
    Response setVolume(SetVolume arg);
    Response setPlaybackProgressInterval(SetPlaybackProgressInterval arg);
    Response requestAudioFocus(RequestAudioFocus arg);
    Response releaseAudioFocus(SoundPlayerProxy arg);
    BoolResponse isShadeSupported();
    BoolResponse isShadePauseSupported();
    BoolResponse isShadeSkipForwardSupported();
    BoolResponse isShadeSkipBackwardsSupported();
    BoolResponse isBackgroundPlaybackSupported();
    Response initializeRecorder(SoundRecorderProxy arg);
    Response releaseRecorder(SoundRecorderProxy arg);
    Response startRecording(StartRecording arg);
    Response stopRecording(SoundRecorderProxy arg);
    Response pauseRecording(SoundRecorderProxy arg);
    Response resumeRecording(SoundRecorderProxy arg);
    MediaFormatResponse getNativeEncoderFormats(MediaFormatProxy arg);
    MediaFormatResponse getNativeDecoderFormats(MediaFormatProxy arg);
    Response setRecordingProgressInterval(SetRecordingProgressInterval arg);

    /** Sets up an instance of `SoundsToPlatformApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, SoundsToPlatformApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.initializePlayer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              InitializePlayer input = InitializePlayer.fromMap((HashMap)message);
              Response output = api.initializePlayer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.initializePlayerWithShade", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              InitializePlayerWithShade input = InitializePlayerWithShade.fromMap((HashMap)message);
              Response output = api.initializePlayerWithShade(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.releasePlayer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundPlayerProxy input = SoundPlayerProxy.fromMap((HashMap)message);
              Response output = api.releasePlayer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.startPlayer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartPlayer input = StartPlayer.fromMap((HashMap)message);
              Response output = api.startPlayer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.stopPlayer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundPlayerProxy input = SoundPlayerProxy.fromMap((HashMap)message);
              Response output = api.stopPlayer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.pausePlayer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundPlayerProxy input = SoundPlayerProxy.fromMap((HashMap)message);
              Response output = api.pausePlayer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.resumePlayer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundPlayerProxy input = SoundPlayerProxy.fromMap((HashMap)message);
              Response output = api.resumePlayer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.seekToPlayer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SeekToPlayer input = SeekToPlayer.fromMap((HashMap)message);
              Response output = api.seekToPlayer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.getDuration", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              GetDuration input = GetDuration.fromMap((HashMap)message);
              DurationResponse output = api.getDuration(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.setVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetVolume input = SetVolume.fromMap((HashMap)message);
              Response output = api.setVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.setPlaybackProgressInterval", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetPlaybackProgressInterval input = SetPlaybackProgressInterval.fromMap((HashMap)message);
              Response output = api.setPlaybackProgressInterval(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.requestAudioFocus", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              RequestAudioFocus input = RequestAudioFocus.fromMap((HashMap)message);
              Response output = api.requestAudioFocus(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.releaseAudioFocus", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundPlayerProxy input = SoundPlayerProxy.fromMap((HashMap)message);
              Response output = api.releaseAudioFocus(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.isShadeSupported", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BoolResponse output = api.isShadeSupported();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.isShadePauseSupported", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BoolResponse output = api.isShadePauseSupported();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.isShadeSkipForwardSupported", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BoolResponse output = api.isShadeSkipForwardSupported();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.isShadeSkipBackwardsSupported", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BoolResponse output = api.isShadeSkipBackwardsSupported();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.isBackgroundPlaybackSupported", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BoolResponse output = api.isBackgroundPlaybackSupported();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.initializeRecorder", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundRecorderProxy input = SoundRecorderProxy.fromMap((HashMap)message);
              Response output = api.initializeRecorder(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.releaseRecorder", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundRecorderProxy input = SoundRecorderProxy.fromMap((HashMap)message);
              Response output = api.releaseRecorder(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.startRecording", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartRecording input = StartRecording.fromMap((HashMap)message);
              Response output = api.startRecording(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.stopRecording", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundRecorderProxy input = SoundRecorderProxy.fromMap((HashMap)message);
              Response output = api.stopRecording(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.pauseRecording", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundRecorderProxy input = SoundRecorderProxy.fromMap((HashMap)message);
              Response output = api.pauseRecording(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.resumeRecording", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SoundRecorderProxy input = SoundRecorderProxy.fromMap((HashMap)message);
              Response output = api.resumeRecording(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.getNativeEncoderFormats", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              MediaFormatProxy input = MediaFormatProxy.fromMap((HashMap)message);
              MediaFormatResponse output = api.getNativeEncoderFormats(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.getNativeDecoderFormats", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              MediaFormatProxy input = MediaFormatProxy.fromMap((HashMap)message);
              MediaFormatResponse output = api.getNativeDecoderFormats(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsToPlatformApi.setRecordingProgressInterval", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetRecordingProgressInterval input = SetRecordingProgressInterval.fromMap((HashMap)message);
              Response output = api.setRecordingProgressInterval(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class SoundsFromPlatformApi {
    private final BinaryMessenger binaryMessenger;
    public SoundsFromPlatformApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void onPlaybackProgress(OnPlaybackProgress argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onPlaybackProgress", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onPlaybackFinished(OnPlaybackFinished argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onPlaybackFinished", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onShadeSkipForward(OnShadeSkipForward argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onShadeSkipForward", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onShadeSkipBackward(OnShadeSkipBackward argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onShadeSkipBackward", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onShadePaused(OnShadePaused argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onShadePaused", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onShadeResumed(OnShadeResumed argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onShadeResumed", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onRecordingProgress(OnRecordingProgress argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onRecordingProgress", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onError(OnError argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SoundsFromPlatformApi.onError", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
